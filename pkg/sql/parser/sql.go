// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:476
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const KEY = 57515
const KEYS = 57516
const KV = 57517
const LATERAL = 57518
const LC_CTYPE = 57519
const LC_COLLATE = 57520
const LEADING = 57521
const LEAST = 57522
const LEFT = 57523
const LESS = 57524
const LEVEL = 57525
const LIKE = 57526
const LIMIT = 57527
const LIST = 57528
const LOCAL = 57529
const LOCALTIME = 57530
const LOCALTIMESTAMP = 57531
const LOW = 57532
const LSHIFT = 57533
const MATCH = 57534
const MINUTE = 57535
const MONTH = 57536
const NAN = 57537
const NAME = 57538
const NAMES = 57539
const NATURAL = 57540
const NEXT = 57541
const NO = 57542
const NO_INDEX_JOIN = 57543
const NORMAL = 57544
const NOT = 57545
const NOTHING = 57546
const NULL = 57547
const NULLIF = 57548
const NULLS = 57549
const NUMERIC = 57550
const OF = 57551
const OFF = 57552
const OFFSET = 57553
const OID = 57554
const ON = 57555
const ONLY = 57556
const OPTIONS = 57557
const OR = 57558
const ORDER = 57559
const ORDINALITY = 57560
const OUT = 57561
const OUTER = 57562
const OVER = 57563
const OVERLAPS = 57564
const OVERLAY = 57565
const PARENT = 57566
const PARTIAL = 57567
const PARTITION = 57568
const PASSWORD = 57569
const PAUSE = 57570
const PLACING = 57571
const PLANS = 57572
const POSITION = 57573
const PRECEDING = 57574
const PRECISION = 57575
const PREPARE = 57576
const PRIMARY = 57577
const PRIORITY = 57578
const QUERIES = 57579
const QUERY = 57580
const RANGE = 57581
const READ = 57582
const REAL = 57583
const RECURSIVE = 57584
const REF = 57585
const REFERENCES = 57586
const REGCLASS = 57587
const REGPROC = 57588
const REGPROCEDURE = 57589
const REGNAMESPACE = 57590
const REGTYPE = 57591
const REMOVE_PATH = 57592
const RENAME = 57593
const REPEATABLE = 57594
const RELEASE = 57595
const RESET = 57596
const RESTORE = 57597
const RESTRICT = 57598
const RESUME = 57599
const RETURNING = 57600
const REVOKE = 57601
const RIGHT = 57602
const ROLLBACK = 57603
const ROLLUP = 57604
const ROW = 57605
const ROWS = 57606
const RSHIFT = 57607
const SAVEPOINT = 57608
const SCATTER = 57609
const SCRUB = 57610
const SEARCH = 57611
const SECOND = 57612
const SELECT = 57613
const SEQUENCE = 57614
const SEQUENCES = 57615
const SERIAL = 57616
const SERIALIZABLE = 57617
const SESSION = 57618
const SESSIONS = 57619
const SESSION_USER = 57620
const SET = 57621
const SETTING = 57622
const SETTINGS = 57623
const SHOW = 57624
const SIMILAR = 57625
const SIMPLE = 57626
const SMALLINT = 57627
const SMALLSERIAL = 57628
const SNAPSHOT = 57629
const SOME = 57630
const SPLIT = 57631
const SQL = 57632
const START = 57633
const STATUS = 57634
const STDIN = 57635
const STRICT = 57636
const STRING = 57637
const STORE = 57638
const STORING = 57639
const SUBSTRING = 57640
const SYMMETRIC = 57641
const SYSTEM = 57642
const TABLE = 57643
const TABLES = 57644
const TEMP = 57645
const TEMPLATE = 57646
const TEMPORARY = 57647
const TESTING_RANGES = 57648
const TESTING_RELOCATE = 57649
const TEXT = 57650
const THAN = 57651
const THEN = 57652
const TIME = 57653
const TIMESTAMP = 57654
const TIMESTAMPTZ = 57655
const TO = 57656
const TRAILING = 57657
const TRACE = 57658
const TRANSACTION = 57659
const TREAT = 57660
const TRIM = 57661
const TRUE = 57662
const TRUNCATE = 57663
const TYPE = 57664
const UNBOUNDED = 57665
const UNCOMMITTED = 57666
const UNION = 57667
const UNIQUE = 57668
const UNKNOWN = 57669
const UPDATE = 57670
const UPSERT = 57671
const USE = 57672
const USER = 57673
const USERS = 57674
const USING = 57675
const UUID = 57676
const VALID = 57677
const VALIDATE = 57678
const VALUE = 57679
const VALUES = 57680
const VARCHAR = 57681
const VARIADIC = 57682
const VIEW = 57683
const VARYING = 57684
const WHEN = 57685
const WHERE = 57686
const WINDOW = 57687
const WITH = 57688
const WITHIN = 57689
const WITHOUT = 57690
const WRITE = 57691
const YEAR = 57692
const ZONE = 57693
const NOT_LA = 57694
const WITH_LA = 57695
const AS_LA = 57696
const CONTAINED_BY = 57697
const HAS_SOME_KEY = 57698
const HAS_ALL_KEYS = 57699
const POSTFIXOP = 57700
const UMINUS = 57701
const HELPTOKEN = 57702

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6772

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	380, 54,
	-2, 704,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	153, 556,
	-2, 0,
	-1, 65,
	96, 704,
	157, 704,
	328, 704,
	329, 704,
	-2, 0,
	-1, 75,
	107, 679,
	117, 679,
	165, 679,
	185, 679,
	211, 679,
	217, 679,
	325, 679,
	-2, 668,
	-1, 108,
	4, 706,
	20, 706,
	21, 706,
	23, 706,
	28, 706,
	33, 706,
	34, 706,
	35, 706,
	36, 706,
	37, 706,
	38, 706,
	39, 706,
	40, 706,
	41, 706,
	42, 706,
	44, 706,
	45, 706,
	46, 706,
	47, 706,
	48, 706,
	51, 706,
	52, 706,
	53, 706,
	55, 706,
	56, 706,
	60, 706,
	61, 706,
	62, 706,
	64, 706,
	65, 706,
	66, 706,
	67, 706,
	69, 706,
	71, 706,
	72, 706,
	75, 706,
	76, 706,
	77, 706,
	85, 706,
	86, 706,
	87, 706,
	88, 706,
	89, 706,
	90, 706,
	91, 706,
	92, 706,
	94, 706,
	96, 706,
	98, 706,
	101, 706,
	102, 706,
	104, 706,
	108, 706,
	109, 706,
	110, 706,
	111, 706,
	112, 706,
	113, 706,
	114, 706,
	122, 706,
	123, 706,
	124, 706,
	125, 706,
	126, 706,
	128, 706,
	130, 706,
	135, 706,
	136, 706,
	138, 706,
	141, 706,
	142, 706,
	145, 706,
	146, 706,
	147, 706,
	148, 706,
	151, 706,
	152, 706,
	154, 706,
	157, 706,
	158, 706,
	159, 706,
	160, 706,
	161, 706,
	162, 706,
	163, 706,
	164, 706,
	166, 706,
	169, 706,
	170, 706,
	171, 706,
	173, 706,
	174, 706,
	175, 706,
	177, 706,
	178, 706,
	180, 706,
	182, 706,
	183, 706,
	186, 706,
	187, 706,
	190, 706,
	192, 706,
	193, 706,
	194, 706,
	195, 706,
	196, 706,
	197, 706,
	199, 706,
	200, 706,
	201, 706,
	202, 706,
	206, 706,
	207, 706,
	208, 706,
	209, 706,
	210, 706,
	212, 706,
	214, 706,
	215, 706,
	218, 706,
	219, 706,
	221, 706,
	223, 706,
	224, 706,
	225, 706,
	226, 706,
	227, 706,
	228, 706,
	230, 706,
	231, 706,
	232, 706,
	233, 706,
	234, 706,
	236, 706,
	237, 706,
	238, 706,
	239, 706,
	240, 706,
	241, 706,
	242, 706,
	243, 706,
	245, 706,
	246, 706,
	247, 706,
	248, 706,
	249, 706,
	251, 706,
	252, 706,
	253, 706,
	254, 706,
	255, 706,
	256, 706,
	257, 706,
	259, 706,
	261, 706,
	262, 706,
	263, 706,
	264, 706,
	266, 706,
	267, 706,
	268, 706,
	269, 706,
	270, 706,
	272, 706,
	273, 706,
	274, 706,
	275, 706,
	276, 706,
	277, 706,
	279, 706,
	280, 706,
	281, 706,
	282, 706,
	284, 706,
	285, 706,
	286, 706,
	287, 706,
	289, 706,
	290, 706,
	291, 706,
	292, 706,
	293, 706,
	294, 706,
	295, 706,
	296, 706,
	297, 706,
	298, 706,
	300, 706,
	302, 706,
	303, 706,
	304, 706,
	305, 706,
	306, 706,
	307, 706,
	308, 706,
	309, 706,
	311, 706,
	312, 706,
	313, 706,
	316, 706,
	317, 706,
	318, 706,
	319, 706,
	321, 706,
	322, 706,
	323, 706,
	324, 706,
	327, 706,
	328, 706,
	329, 706,
	330, 706,
	332, 706,
	334, 706,
	335, 706,
	336, 706,
	337, 706,
	338, 706,
	339, 706,
	342, 706,
	347, 706,
	348, 706,
	349, 706,
	350, 706,
	351, 706,
	-2, 0,
	-1, 125,
	107, 678,
	117, 678,
	165, 678,
	185, 678,
	211, 678,
	217, 678,
	325, 678,
	-2, 671,
	-1, 130,
	1, 605,
	169, 605,
	236, 605,
	240, 605,
	379, 605,
	380, 605,
	-2, 0,
	-1, 132,
	1, 605,
	379, 605,
	380, 605,
	-2, 0,
	-1, 133,
	1, 605,
	379, 605,
	380, 605,
	-2, 0,
	-1, 134,
	1, 609,
	379, 609,
	380, 609,
	-2, 0,
	-1, 141,
	4, 712,
	5, 712,
	6, 712,
	7, 712,
	8, 712,
	9, 712,
	20, 712,
	21, 712,
	23, 712,
	28, 712,
	29, 712,
	33, 712,
	34, 712,
	35, 712,
	36, 712,
	37, 712,
	38, 712,
	39, 712,
	40, 712,
	41, 712,
	42, 712,
	44, 712,
	45, 712,
	46, 712,
	47, 712,
	48, 712,
	49, 712,
	50, 712,
	51, 712,
	52, 712,
	53, 712,
	55, 712,
	56, 712,
	58, 712,
	60, 712,
	61, 712,
	62, 712,
	64, 712,
	65, 712,
	66, 712,
	67, 712,
	69, 712,
	71, 712,
	72, 712,
	74, 712,
	75, 712,
	76, 712,
	77, 712,
	79, 712,
	80, 712,
	81, 712,
	83, 712,
	84, 712,
	85, 712,
	86, 712,
	87, 712,
	88, 712,
	89, 712,
	90, 712,
	91, 712,
	92, 712,
	94, 712,
	96, 712,
	98, 712,
	101, 712,
	102, 712,
	104, 712,
	108, 712,
	109, 712,
	110, 712,
	111, 712,
	112, 712,
	113, 712,
	114, 712,
	115, 712,
	116, 712,
	122, 712,
	123, 712,
	124, 712,
	125, 712,
	126, 712,
	128, 712,
	130, 712,
	133, 712,
	135, 712,
	136, 712,
	138, 712,
	141, 712,
	142, 712,
	145, 712,
	146, 712,
	147, 712,
	148, 712,
	149, 712,
	151, 712,
	152, 712,
	154, 712,
	156, 712,
	157, 712,
	158, 712,
	159, 712,
	160, 712,
	161, 712,
	162, 712,
	163, 712,
	164, 712,
	166, 712,
	168, 712,
	169, 712,
	170, 712,
	171, 712,
	172, 712,
	173, 712,
	174, 712,
	175, 712,
	177, 712,
	178, 712,
	180, 712,
	181, 712,
	182, 712,
	183, 712,
	184, 712,
	186, 712,
	187, 712,
	190, 712,
	192, 712,
	193, 712,
	194, 712,
	195, 712,
	196, 712,
	197, 712,
	198, 712,
	199, 712,
	200, 712,
	201, 712,
	202, 712,
	203, 712,
	205, 712,
	206, 712,
	207, 712,
	208, 712,
	209, 712,
	210, 712,
	212, 712,
	215, 712,
	218, 712,
	219, 712,
	220, 712,
	221, 712,
	222, 712,
	223, 712,
	224, 712,
	225, 712,
	226, 712,
	227, 712,
	228, 712,
	230, 712,
	231, 712,
	232, 712,
	233, 712,
	234, 712,
	236, 712,
	237, 712,
	238, 712,
	239, 712,
	240, 712,
	241, 712,
	242, 712,
	243, 712,
	245, 712,
	246, 712,
	247, 712,
	248, 712,
	249, 712,
	251, 712,
	252, 712,
	253, 712,
	254, 712,
	255, 712,
	256, 712,
	257, 712,
	259, 712,
	260, 712,
	261, 712,
	262, 712,
	263, 712,
	264, 712,
	266, 712,
	267, 712,
	268, 712,
	269, 712,
	270, 712,
	272, 712,
	273, 712,
	274, 712,
	275, 712,
	276, 712,
	277, 712,
	278, 712,
	279, 712,
	280, 712,
	281, 712,
	282, 712,
	283, 712,
	284, 712,
	285, 712,
	286, 712,
	287, 712,
	289, 712,
	290, 712,
	291, 712,
	292, 712,
	293, 712,
	294, 712,
	295, 712,
	296, 712,
	297, 712,
	298, 712,
	300, 712,
	302, 712,
	303, 712,
	304, 712,
	305, 712,
	306, 712,
	307, 712,
	308, 712,
	309, 712,
	311, 712,
	312, 712,
	313, 712,
	316, 712,
	317, 712,
	318, 712,
	319, 712,
	320, 712,
	321, 712,
	322, 712,
	323, 712,
	324, 712,
	327, 712,
	328, 712,
	329, 712,
	330, 712,
	331, 712,
	332, 712,
	334, 712,
	335, 712,
	336, 712,
	337, 712,
	338, 712,
	339, 712,
	342, 712,
	347, 712,
	348, 712,
	349, 712,
	350, 712,
	351, 712,
	352, 712,
	362, 712,
	367, 712,
	368, 712,
	369, 712,
	376, 712,
	382, 712,
	-2, 0,
	-1, 144,
	1, 54,
	380, 54,
	-2, 704,
	-1, 516,
	132, 1319,
	314, 1319,
	357, 1319,
	378, 1319,
	-2, 0,
	-1, 517,
	132, 1266,
	314, 1266,
	357, 1266,
	378, 1266,
	-2, 0,
	-1, 519,
	132, 1379,
	314, 1379,
	357, 1379,
	378, 1379,
	-2, 0,
	-1, 521,
	132, 1402,
	314, 1402,
	357, 1402,
	378, 1402,
	-2, 0,
	-1, 528,
	132, 1324,
	314, 1324,
	357, 1324,
	378, 1324,
	-2, 328,
	-1, 554,
	1, 406,
	375, 406,
	377, 406,
	379, 406,
	380, 406,
	-2, 0,
	-1, 555,
	1, 458,
	129, 458,
	375, 458,
	377, 458,
	379, 458,
	380, 458,
	-2, 0,
	-1, 561,
	1, 420,
	375, 420,
	377, 420,
	379, 420,
	380, 420,
	-2, 0,
	-1, 563,
	1, 424,
	375, 424,
	377, 424,
	379, 424,
	380, 424,
	-2, 0,
	-1, 566,
	1, 432,
	375, 432,
	377, 432,
	379, 432,
	380, 432,
	-2, 0,
	-1, 567,
	1, 437,
	375, 437,
	377, 437,
	379, 437,
	380, 437,
	-2, 0,
	-1, 570,
	1, 447,
	375, 447,
	377, 447,
	379, 447,
	380, 447,
	-2, 0,
	-1, 586,
	117, 714,
	185, 714,
	211, 714,
	-2, 674,
	-1, 589,
	117, 713,
	185, 713,
	211, 713,
	-2, 672,
	-1, 646,
	376, 1244,
	-2, 1237,
	-1, 647,
	376, 1245,
	-2, 1238,
	-1, 653,
	5, 891,
	376, 891,
	-2, 1454,
	-1, 678,
	5, 850,
	-2, 1423,
	-1, 679,
	5, 885,
	376, 885,
	-2, 1425,
	-1, 680,
	5, 860,
	-2, 1426,
	-1, 681,
	5, 859,
	-2, 1427,
	-1, 682,
	5, 885,
	376, 885,
	-2, 1430,
	-1, 683,
	5, 885,
	376, 885,
	-2, 1431,
	-1, 684,
	5, 886,
	-2, 1434,
	-1, 685,
	5, 842,
	-2, 1435,
	-1, 686,
	5, 842,
	-2, 1436,
	-1, 687,
	5, 867,
	-2, 1440,
	-1, 688,
	5, 852,
	-2, 1441,
	-1, 689,
	5, 853,
	-2, 1442,
	-1, 690,
	5, 843,
	-2, 1448,
	-1, 691,
	5, 844,
	-2, 1449,
	-1, 692,
	5, 845,
	-2, 1450,
	-1, 693,
	5, 846,
	-2, 1451,
	-1, 694,
	5, 847,
	-2, 1452,
	-1, 695,
	5, 848,
	-2, 1453,
	-1, 696,
	5, 842,
	-2, 1458,
	-1, 697,
	5, 851,
	-2, 1463,
	-1, 698,
	5, 849,
	-2, 1466,
	-1, 699,
	5, 883,
	376, 883,
	-2, 1468,
	-1, 700,
	5, 887,
	-2, 1471,
	-1, 701,
	5, 889,
	-2, 1472,
	-1, 702,
	5, 882,
	376, 882,
	-2, 1477,
	-1, 888,
	227, 702,
	-2, 549,
	-1, 892,
	213, 1241,
	-2, 0,
	-1, 927,
	1, 217,
	375, 217,
	377, 217,
	379, 217,
	380, 217,
	-2, 677,
	-1, 934,
	4, 1476,
	10, 1476,
	11, 1476,
	13, 1476,
	14, 1476,
	15, 1476,
	16, 1476,
	17, 1476,
	18, 1476,
	20, 1476,
	21, 1476,
	23, 1476,
	26, 1476,
	28, 1476,
	30, 1476,
	33, 1476,
	34, 1476,
	35, 1476,
	36, 1476,
	37, 1476,
	38, 1476,
	39, 1476,
	40, 1476,
	41, 1476,
	42, 1476,
	44, 1476,
	45, 1476,
	46, 1476,
	47, 1476,
	48, 1476,
	51, 1476,
	52, 1476,
	53, 1476,
	55, 1476,
	56, 1476,
	57, 1476,
	60, 1476,
	61, 1476,
	62, 1476,
	63, 1476,
	64, 1476,
	65, 1476,
	66, 1476,
	67, 1476,
	69, 1476,
	70, 1476,
	71, 1476,
	72, 1476,
	74, 1476,
	75, 1476,
	76, 1476,
	77, 1476,
	85, 1476,
	86, 1476,
	87, 1476,
	88, 1476,
	89, 1476,
	90, 1476,
	91, 1476,
	92, 1476,
	94, 1476,
	96, 1476,
	98, 1476,
	101, 1476,
	102, 1476,
	104, 1476,
	108, 1476,
	109, 1476,
	110, 1476,
	111, 1476,
	112, 1476,
	113, 1476,
	114, 1476,
	118, 1476,
	119, 1476,
	120, 1476,
	121, 1476,
	122, 1476,
	123, 1476,
	124, 1476,
	125, 1476,
	126, 1476,
	127, 1476,
	128, 1476,
	130, 1476,
	133, 1476,
	135, 1476,
	136, 1476,
	138, 1476,
	141, 1476,
	142, 1476,
	145, 1476,
	146, 1476,
	147, 1476,
	148, 1476,
	149, 1476,
	150, 1476,
	151, 1476,
	152, 1476,
	154, 1476,
	156, 1476,
	157, 1476,
	158, 1476,
	159, 1476,
	160, 1476,
	161, 1476,
	162, 1476,
	163, 1476,
	164, 1476,
	166, 1476,
	168, 1476,
	169, 1476,
	170, 1476,
	171, 1476,
	172, 1476,
	173, 1476,
	174, 1476,
	175, 1476,
	177, 1476,
	178, 1476,
	180, 1476,
	181, 1476,
	182, 1476,
	183, 1476,
	184, 1476,
	186, 1476,
	187, 1476,
	190, 1476,
	191, 1476,
	192, 1476,
	193, 1476,
	194, 1476,
	195, 1476,
	196, 1476,
	197, 1476,
	198, 1476,
	199, 1476,
	200, 1476,
	201, 1476,
	202, 1476,
	206, 1476,
	207, 1476,
	208, 1476,
	209, 1476,
	210, 1476,
	212, 1476,
	215, 1476,
	216, 1476,
	218, 1476,
	219, 1476,
	221, 1476,
	223, 1476,
	224, 1476,
	225, 1476,
	226, 1476,
	227, 1476,
	228, 1476,
	230, 1476,
	231, 1476,
	232, 1476,
	233, 1476,
	234, 1476,
	236, 1476,
	237, 1476,
	238, 1476,
	239, 1476,
	240, 1476,
	241, 1476,
	242, 1476,
	243, 1476,
	245, 1476,
	246, 1476,
	247, 1476,
	248, 1476,
	249, 1476,
	250, 1476,
	251, 1476,
	252, 1476,
	253, 1476,
	254, 1476,
	255, 1476,
	256, 1476,
	257, 1476,
	259, 1476,
	260, 1476,
	261, 1476,
	262, 1476,
	263, 1476,
	264, 1476,
	265, 1476,
	266, 1476,
	267, 1476,
	268, 1476,
	269, 1476,
	270, 1476,
	272, 1476,
	273, 1476,
	274, 1476,
	275, 1476,
	276, 1476,
	277, 1476,
	279, 1476,
	280, 1476,
	281, 1476,
	282, 1476,
	283, 1476,
	284, 1476,
	285, 1476,
	286, 1476,
	287, 1476,
	289, 1476,
	290, 1476,
	291, 1476,
	292, 1476,
	293, 1476,
	294, 1476,
	295, 1476,
	296, 1476,
	297, 1476,
	298, 1476,
	300, 1476,
	302, 1476,
	303, 1476,
	304, 1476,
	305, 1476,
	306, 1476,
	307, 1476,
	308, 1476,
	309, 1476,
	311, 1476,
	312, 1476,
	313, 1476,
	316, 1476,
	317, 1476,
	318, 1476,
	319, 1476,
	321, 1476,
	322, 1476,
	323, 1476,
	324, 1476,
	327, 1476,
	328, 1476,
	329, 1476,
	330, 1476,
	332, 1476,
	334, 1476,
	335, 1476,
	336, 1476,
	337, 1476,
	338, 1476,
	339, 1476,
	342, 1476,
	347, 1476,
	348, 1476,
	349, 1476,
	350, 1476,
	351, 1476,
	352, 1476,
	353, 1476,
	355, 1476,
	356, 1476,
	357, 1476,
	358, 1476,
	359, 1476,
	360, 1476,
	361, 1476,
	362, 1476,
	364, 1476,
	365, 1476,
	366, 1476,
	367, 1476,
	368, 1476,
	369, 1476,
	370, 1476,
	371, 1476,
	372, 1476,
	374, 1476,
	377, 1476,
	378, 1476,
	381, 1476,
	382, 1476,
	-2, 0,
	-1, 947,
	132, 1379,
	314, 1379,
	357, 1379,
	378, 1379,
	-2, 0,
	-1, 964,
	132, 1402,
	314, 1402,
	357, 1402,
	378, 1402,
	-2, 0,
	-1, 965,
	169, 617,
	236, 617,
	240, 617,
	-2, 316,
	-1, 1037,
	117, 713,
	185, 713,
	211, 713,
	-2, 675,
	-1, 1116,
	107, 679,
	117, 679,
	165, 679,
	185, 679,
	211, 679,
	217, 679,
	325, 679,
	-2, 1020,
	-1, 1126,
	376, 1221,
	-2, 1209,
	-1, 1144,
	377, 1133,
	-2, 0,
	-1, 1168,
	169, 617,
	236, 617,
	240, 617,
	-2, 612,
	-1, 1196,
	377, 1133,
	-2, 0,
	-1, 1200,
	107, 679,
	117, 679,
	165, 679,
	185, 679,
	211, 679,
	217, 679,
	325, 679,
	-2, 775,
	-1, 1341,
	169, 617,
	236, 617,
	240, 617,
	-2, 318,
	-1, 1443,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 926,
	-1, 1444,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 927,
	-1, 1445,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 928,
	-1, 1446,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 929,
	-1, 1447,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 930,
	-1, 1448,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 931,
	-1, 1449,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 932,
	-1, 1450,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 933,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 942,
	-1, 1460,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 943,
	-1, 1461,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 944,
	-1, 1464,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 949,
	-1, 1470,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 951,
	-1, 1472,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 955,
	-1, 1473,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 956,
	-1, 1474,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 957,
	-1, 1475,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 958,
	-1, 1544,
	132, 1144,
	376, 1244,
	-2, 1237,
	-1, 1545,
	132, 1145,
	-2, 1419,
	-1, 1546,
	132, 1146,
	-2, 1323,
	-1, 1547,
	132, 1147,
	-2, 1284,
	-1, 1548,
	132, 1148,
	-2, 1301,
	-1, 1549,
	132, 1149,
	-2, 1322,
	-1, 1550,
	132, 1150,
	-2, 1375,
	-1, 1626,
	1, 776,
	74, 776,
	107, 776,
	117, 776,
	133, 776,
	137, 776,
	139, 776,
	156, 776,
	165, 776,
	172, 776,
	181, 776,
	185, 776,
	198, 776,
	211, 776,
	213, 776,
	217, 776,
	258, 776,
	260, 776,
	325, 776,
	333, 776,
	344, 776,
	345, 776,
	354, 776,
	375, 776,
	377, 776,
	379, 776,
	380, 776,
	381, 776,
	-2, 775,
	-1, 1772,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 950,
	-1, 1773,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 952,
	-1, 1778,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 953,
	-1, 1796,
	222, 1104,
	-2, 1106,
	-1, 2028,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 954,
	-1, 2033,
	168, 0,
	-2, 970,
	-1, 2042,
	222, 1105,
	-2, 1107,
	-1, 2084,
	13, 0,
	14, 0,
	15, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 997,
	-1, 2085,
	13, 0,
	14, 0,
	15, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 998,
	-1, 2086,
	13, 0,
	14, 0,
	15, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 999,
	-1, 2090,
	13, 0,
	14, 0,
	15, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 1003,
	-1, 2091,
	13, 0,
	14, 0,
	15, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 1004,
	-1, 2092,
	13, 0,
	14, 0,
	15, 0,
	355, 0,
	356, 0,
	357, 0,
	-2, 1005,
	-1, 2224,
	168, 0,
	-2, 971,
	-1, 2227,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 974,
	-1, 2228,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 976,
	-1, 2348,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 975,
	-1, 2349,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 977,
	-1, 2356,
	168, 0,
	-2, 1006,
	-1, 2433,
	168, 0,
	-2, 1007,
	-1, 2514,
	36, 0,
	149, 0,
	184, 0,
	283, 0,
	352, 0,
	362, 0,
	-2, 1422,
}

const sqlPrivate = 57344

const sqlLast = 44667

var sqlAct = [...]int{

	647, 2582, 2319, 750, 2318, 2177, 2513, 2580, 2522, 2486,
	2382, 2563, 2523, 1693, 2524, 1701, 2007, 2512, 1672, 1240,
	2438, 2329, 2061, 2292, 610, 1621, 2187, 2143, 2209, 1973,
	1766, 2278, 74, 606, 1248, 1335, 985, 1283, 2144, 2211,
	1336, 1975, 183, 645, 2362, 880, 1690, 183, 1676, 1261,
	1671, 1910, 623, 1862, 1981, 1203, 183, 1194, 777, 2203,
	1177, 1889, 1675, 473, 26, 183, 2258, 1702, 1639, 1630,
	183, 183, 2114, 1897, 183, 598, 124, 183, 1622, 590,
	1422, 1244, 1665, 644, 1861, 183, 1807, 1499, 1417, 458,
	1762, 1748, 1366, 968, 527, 1122, 1236, 1040, 1500, 1206,
	1208, 1198, 1178, 1284, 1524, 1573, 617, 1508, 1487, 1362,
	1484, 967, 917, 756, 455, 1154, 1158, 1518, 914, 1673,
	907, 987, 1695, 759, 928, 1679, 1608, 1185, 1595, 738,
	1540, 616, 507, 1111, 125, 1039, 183, 183, 1041, 639,
	1168, 124, 126, 485, 183, 174, 1365, 520, 1255, 904,
	179, 736, 2293, 1167, 1795, 1045, 2128, 548, 1263, 2129,
	595, 2320, 2320, 1694, 2559, 1263, 1263, 594, 1231, 594,
	183, 183, 183, 183, 779, 1195, 2558, 2557, 183, 183,
	1231, 1231, 2539, 2534, 2533, 2530, 2291, 1716, 1716, 1231,
	2510, 2509, 2481, 2026, 1731, 1731, 1724, 868, 2476, 753,
	1990, 2472, 2343, 2464, 1227, 1231, 2435, 2291, 26, 2606,
	1724, 2413, 2599, 589, 2410, 2291, 499, 2408, 1231, 2393,
	124, 2291, 604, 1231, 2392, 2370, 1666, 2367, 2291, 1231,
	184, 1231, 2350, 2314, 2312, 2290, 1724, 1716, 1716, 2291,
	2271, 2226, 2202, 2197, 1231, 1724, 1670, 1670, 2124, 1716,
	2037, 2001, 2125, 2117, 1716, 1962, 2482, 1799, 1961, 587,
	1991, 637, 1231, 1800, 1886, 1879, 1877, 586, 1231, 1880,
	1716, 1876, 1875, 1735, 1666, 1716, 1716, 1716, 1597, 742,
	1731, 743, 1521, 764, 768, 774, 599, 2343, 740, 1723,
	1715, 1056, 1057, 1724, 1716, 1669, 1602, 2117, 1276, 1670,
	1601, 1731, 1277, 1596, 524, 2018, 1628, 2097, 2039, 141,
	1231, 1698, 1962, 1765, 1059, 1746, 2602, 2593, 1344, 1172,
	597, 1503, 866, 949, 144, 1832, 1833, 141, 946, 1363,
	945, 1716, 944, 1806, 1522, 943, 2294, 942, 1058, 143,
	941, 940, 939, 938, 1078, 937, 936, 935, 744, 741,
	580, 579, 578, 546, 545, 544, 543, 143, 1056, 1057,
	542, 541, 540, 539, 538, 703, 1264, 1832, 1833, 537,
	1850, 1851, 1852, 1264, 1264, 536, 142, 535, 534, 533,
	532, 1059, 531, 2223, 135, 1523, 1520, 530, 515, 514,
	513, 136, 512, 511, 142, 446, 445, 444, 443, 1081,
	1082, 1083, 1084, 442, 780, 1058, 427, 426, 1064, 417,
	416, 415, 414, 407, 127, 406, 167, 1056, 1057, 183,
	1847, 183, 183, 183, 166, 183, 165, 164, 163, 162,
	183, 161, 127, 160, 159, 872, 183, 158, 157, 156,
	1059, 155, 1838, 154, 153, 152, 151, 150, 149, 183,
	183, 183, 183, 183, 148, 147, 146, 145, 931, 1905,
	1832, 1833, 1525, 1369, 1058, 1537, 980, 2586, 1199, 1535,
	2581, 921, 1079, 2584, 2529, 1064, 1832, 1833, 1533, 2511,
	183, 2496, 2491, 2430, 1838, 2411, 2257, 1964, 1531, 141,
	595, 1269, 1052, 2256, 183, 751, 2336, 2252, 1262, 1397,
	1056, 1057, 2251, 1086, 1087, 1088, 1096, 1097, 1098, 1990,
	183, 40, 2244, 884, 2243, 886, 1089, 890, 2242, 143,
	183, 2238, 41, 1059, 2237, 1853, 1100, 1596, 2236, 2235,
	2229, 1085, 2208, 2111, 1064, 44, 2106, 2105, 2104, 781,
	2047, 1960, 1519, 910, 910, 1917, 1080, 1058, 1848, 906,
	1913, 931, 1884, 1078, 1881, 1869, 142, 1860, 1831, 1828,
	1075, 52, 1827, 1825, 135, 879, 1812, 1811, 1729, 1280,
	911, 136, 1796, 1626, 1052, 1832, 1833, 1838, 1051, 929,
	1495, 1130, 183, 877, 1056, 1057, 752, 2571, 950, 141,
	63, 983, 2570, 1838, 1697, 1197, 1247, 64, 1079, 480,
	65, 1123, 1196, 1114, 2063, 2501, 2500, 1059, 1081, 1082,
	1083, 1084, 2499, 2467, 2459, 2458, 2449, 1064, 2447, 143,
	752, 978, 1849, 2425, 2424, 2423, 2379, 1832, 1833, 2358,
	2344, 1058, 2323, 67, 2311, 2297, 2249, 2185, 2183, 1093,
	1101, 1848, 2182, 2180, 2152, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 595, 2005, 142, 872, 1099, 2335,
	2151, 2132, 965, 2120, 135, 2032, 1038, 962, 1950, 1944,
	1930, 136, 1080, 1037, 1091, 1929, 1915, 1885, 1859, 1821,
	1820, 1079, 1834, 1835, 1836, 1837, 1839, 1840, 932, 1364,
	1761, 2441, 1838, 1496, 127, 1033, 1817, 1792, 1760, 1787,
	1489, 1064, 1159, 1162, 1613, 1585, 1090, 981, 1529, 1239,
	1930, 1175, 1844, 1845, 1846, 1849, 68, 1062, 1063, 1065,
	1066, 1843, 1841, 1842, 1834, 1835, 1836, 1837, 1839, 1840,
	1166, 1152, 1151, 587, 1150, 1149, 183, 1148, 183, 1147,
	1085, 586, 128, 70, 1838, 71, 1146, 1176, 1048, 1049,
	1145, 1144, 1143, 1142, 1141, 1080, 1848, 1140, 1053, 141,
	1139, 183, 183, 1138, 1750, 1079, 1137, 479, 1136, 1135,
	104, 1134, 1127, 1094, 1060, 1061, 1062, 1063, 1065, 1066,
	1115, 932, 1114, 1726, 961, 1126, 1183, 953, 925, 143,
	2342, 2231, 2207, 595, 2127, 2123, 1798, 1614, 1156, 1157,
	1832, 1833, 1123, 1160, 2003, 1112, 1197, 1181, 1848, 1199,
	1976, 977, 2346, 1163, 1843, 1841, 1842, 1834, 1835, 1836,
	1837, 1839, 1840, 933, 1666, 2345, 142, 878, 2339, 1903,
	1849, 124, 2130, 1734, 135, 1836, 1837, 1839, 1840, 1080,
	1536, 136, 1092, 1953, 1534, 1070, 1071, 1077, 1076, 1072,
	1073, 1074, 1095, 1532, 1069, 1067, 1068, 1060, 1061, 1062,
	1063, 1065, 1066, 1530, 127, 1992, 931, 183, 1171, 752,
	1193, 2253, 1281, 779, 1056, 1057, 1733, 1031, 1216, 183,
	1169, 1164, 1849, 1036, 1201, 1947, 1165, 1354, 1353, 1173,
	1363, 1360, 1943, 183, 1883, 1882, 1771, 1059, 1401, 183,
	974, 183, 1350, 183, 1132, 2008, 1229, 183, 1245, 2363,
	1246, 1694, 2064, 1803, 168, 1509, 933, 1155, 1521, 1025,
	2589, 1058, 2588, 1986, 2139, 1238, 2494, 1720, 2471, 2554,
	2305, 1232, 1834, 1835, 1836, 1837, 1839, 1840, 1069, 1067,
	1068, 1060, 1061, 1062, 1063, 1065, 1066, 2015, 183, 183,
	1736, 2404, 1129, 1017, 2555, 931, 2403, 183, 2401, 1026,
	183, 1266, 731, 2400, 1268, 2171, 2168, 2136, 1271, 1209,
	1522, 1210, 432, 733, 2135, 1252, 1357, 1816, 729, 1815,
	1814, 779, 1841, 1842, 1834, 1835, 1836, 1837, 1839, 1840,
	183, 727, 1813, 975, 1774, 183, 1719, 724, 1661, 171,
	183, 183, 1632, 183, 1657, 183, 1654, 183, 1471, 183,
	1170, 2163, 906, 865, 2317, 593, 1589, 1230, 1588, 1432,
	183, 1523, 1520, 2004, 419, 2596, 183, 183, 1482, 1691,
	1209, 1395, 1210, 433, 1217, 931, 976, 1351, 582, 1370,
	1034, 2175, 447, 494, 1480, 632, 2176, 1394, 1254, 1329,
	1211, 1257, 2470, 1056, 1057, 183, 1214, 1486, 1486, 779,
	1209, 1957, 1210, 1632, 1234, 172, 1640, 584, 585, 1412,
	1358, 1739, 1631, 592, 1215, 1398, 1059, 2020, 1525, 2384,
	2507, 585, 1396, 1741, 1371, 2154, 1374, 180, 1225, 2057,
	124, 1258, 412, 1279, 1278, 962, 932, 705, 1525, 990,
	1058, 428, 1337, 780, 1224, 1341, 1742, 1493, 1011, 424,
	453, 1211, 1491, 2546, 1355, 497, 180, 1431, 1740, 505,
	640, 2478, 510, 1367, 1476, 594, 1222, 451, 1727, 1385,
	529, 1983, 1477, 2016, 1478, 2573, 1197, 1952, 1483, 1404,
	1946, 1211, 1055, 1643, 1223, 1378, 2479, 595, 1012, 960,
	1218, 173, 595, 1509, 1763, 1764, 1153, 1984, 1220, 2452,
	1423, 1430, 1840, 2526, 1686, 2583, 1525, 2581, 1559, 1024,
	1064, 183, 1238, 183, 1402, 2354, 183, 2407, 1519, 1403,
	587, 739, 739, 587, 587, 932, 2554, 183, 1413, 412,
	2320, 1414, 1415, 450, 1594, 1393, 779, 1109, 1819, 183,
	1609, 2054, 1983, 183, 435, 434, 183, 2218, 1263, 2014,
	183, 780, 1035, 169, 183, 412, 412, 772, 412, 1506,
	183, 1625, 1504, 180, 869, 408, 1030, 183, 779, 2019,
	971, 933, 183, 591, 1079, 595, 1066, 1558, 781, 2395,
	183, 1494, 1605, 1568, 1497, 594, 2545, 1642, 183, 1479,
	1364, 1361, 2055, 170, 1616, 2527, 1481, 2161, 1633, 183,
	1941, 183, 2155, 183, 1338, 932, 183, 1016, 183, 2460,
	183, 183, 1551, 183, 183, 2525, 998, 725, 931, 1651,
	1644, 1646, 183, 2566, 1212, 735, 1663, 1659, 734, 780,
	1207, 2021, 1714, 725, 420, 1619, 1615, 972, 1221, 1375,
	1044, 973, 1592, 1591, 2385, 1379, 726, 1380, 1080, 1381,
	1600, 1382, 725, 1383, 2528, 1606, 1610, 1611, 1629, 1696,
	933, 1696, 2461, 418, 1776, 1485, 1201, 1649, 2553, 1525,
	1389, 1391, 2551, 1655, 991, 1636, 1021, 583, 1641, 1662,
	704, 449, 493, 2574, 2328, 1212, 781, 1184, 425, 441,
	2544, 2286, 124, 421, 1688, 956, 486, 1708, 124, 1421,
	910, 948, 910, 422, 982, 1373, 573, 1784, 2093, 436,
	779, 452, 1722, 1492, 992, 1212, 2394, 989, 183, 491,
	1700, 448, 1711, 1782, 603, 487, 1709, 1956, 1710, 1712,
	2287, 1717, 2579, 409, 183, 183, 183, 2377, 183, 929,
	933, 1721, 1718, 1022, 1342, 504, 1188, 2247, 1728, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 1264, 488, 1730, 482,
	1054, 183, 1468, 2444, 781, 483, 780, 959, 1747, 1191,
	601, 2304, 573, 2301, 1160, 2564, 1163, 2138, 2303, 483,
	490, 1926, 1922, 1689, 1253, 1186, 1242, 1157, 1156, 574,
	603, 1241, 1043, 2053, 1189, 1737, 1832, 1833, 780, 1023,
	1911, 410, 124, 1779, 529, 1184, 529, 888, 529, 1409,
	893, 1187, 2094, 1780, 2487, 896, 486, 1785, 2095, 1349,
	2592, 412, 2188, 602, 1388, 1043, 1899, 999, 1345, 882,
	486, 2565, 2330, 2378, 529, 529, 412, 918, 869, 491,
	2282, 1751, 2283, 1900, 2578, 487, 881, 1753, 932, 1559,
	1559, 1755, 966, 491, 2567, 574, 176, 2248, 1759, 487,
	1042, 1932, 595, 1931, 1188, 529, 1769, 1188, 1347, 1604,
	1603, 1912, 2285, 1190, 573, 1466, 1469, 488, 971, 529,
	1348, 2288, 502, 2300, 496, 1410, 1044, 1191, 2302, 592,
	1191, 488, 603, 1042, 489, 957, 2321, 892, 903, 575,
	490, 781, 2178, 1186, 1955, 529, 1607, 2115, 3, 901,
	1465, 971, 1189, 1838, 490, 1189, 2375, 437, 1777, 1775,
	478, 34, 2259, 2357, 1528, 1559, 1559, 1559, 1781, 1187,
	2246, 1805, 1015, 781, 652, 1783, 595, 1791, 183, 779,
	780, 2174, 1863, 2031, 183, 183, 1898, 2376, 183, 1887,
	1020, 492, 1958, 183, 1893, 1802, 183, 574, 1009, 1826,
	438, 1056, 1057, 2284, 183, 575, 1007, 412, 477, 33,
	183, 183, 183, 1786, 1732, 1894, 183, 1848, 972, 183,
	576, 1907, 973, 933, 1059, 183, 183, 183, 183, 183,
	439, 1190, 440, 1891, 1190, 183, 1668, 1892, 183, 1895,
	1896, 1660, 183, 1901, 1653, 476, 30, 1029, 1058, 1467,
	870, 183, 1005, 577, 489, 1028, 1866, 1867, 1868, 971,
	954, 183, 1864, 183, 1923, 183, 183, 871, 489, 183,
	707, 1902, 1003, 183, 867, 475, 80, 1756, 183, 1888,
	183, 474, 79, 723, 600, 1001, 576, 183, 471, 22,
	501, 1849, 495, 762, 1942, 1963, 1906, 1965, 995, 1014,
	183, 931, 1949, 902, 1386, 34, 1377, 575, 1916, 1918,
	595, 492, 931, 183, 900, 781, 472, 23, 1064, 577,
	1019, 1927, 470, 28, 1133, 492, 972, 1966, 1008, 1940,
	973, 1970, 469, 20, 899, 1988, 1006, 467, 19, 1994,
	1995, 2000, 1996, 1997, 468, 18, 462, 15, 1527, 2521,
	183, 1228, 2009, 33, 2484, 2275, 2159, 2157, 1927, 1967,
	1968, 510, 2137, 739, 463, 16, 1056, 1057, 461, 14,
	1972, 1979, 706, 1692, 1985, 466, 12, 649, 460, 10,
	1559, 1559, 1004, 1993, 465, 7, 412, 412, 576, 1059,
	30, 1999, 1842, 1834, 1835, 1836, 1837, 1839, 1840, 1685,
	183, 1684, 1002, 1273, 2010, 2034, 2011, 2012, 2002, 780,
	2013, 1272, 1270, 1058, 1267, 1000, 728, 730, 1265, 2017,
	80, 577, 1226, 1219, 464, 6, 79, 1213, 994, 2022,
	2044, 1974, 1767, 22, 2024, 2418, 459, 5, 747, 1559,
	1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
	1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 748, 1559,
	1046, 23, 2555, 2040, 898, 2341, 2340, 28, 2049, 2050,
	2051, 2038, 1368, 2204, 2420, 481, 2043, 20, 1648, 2196,
	1664, 183, 19, 1064, 2067, 1656, 1652, 183, 2065, 18,
	1501, 15, 180, 2072, 2070, 2099, 183, 183, 1768, 2056,
	2058, 2059, 1632, 2454, 412, 1757, 1632, 1423, 2068, 16,
	2294, 1647, 2126, 14, 2133, 1645, 1423, 2073, 1251, 993,
	12, 1399, 1400, 10, 412, 2432, 412, 2100, 412, 7,
	2406, 932, 1259, 2260, 1050, 749, 2122, 1047, 2098, 1658,
	1650, 124, 932, 183, 781, 183, 2118, 1079, 503, 2103,
	2119, 2173, 2116, 183, 2149, 2113, 931, 2483, 1060, 1061,
	1062, 1063, 1065, 1066, 1056, 1057, 2158, 2184, 2160, 6,
	2326, 183, 183, 529, 180, 2134, 2164, 2141, 1699, 2181,
	2169, 5, 180, 2198, 2577, 529, 2172, 1059, 1687, 183,
	1683, 2162, 2190, 1593, 2148, 2131, 2189, 1340, 1282, 183,
	779, 183, 183, 2562, 2369, 2179, 2201, 779, 1056, 1057,
	2265, 1058, 2206, 2192, 2112, 529, 2060, 2193, 1832, 1833,
	529, 1080, 1056, 1057, 2194, 180, 529, 1891, 529, 1744,
	529, 1323, 529, 2200, 529, 2006, 2220, 1908, 2199, 2191,
	1878, 2205, 1744, 1743, 183, 1387, 1745, 1590, 1587, 1586,
	2225, 529, 529, 1517, 1290, 1058, 1120, 2233, 2215, 2052,
	1969, 1130, 1128, 1027, 1018, 2221, 933, 1013, 1010, 996,
	958, 1343, 581, 2383, 484, 1359, 1376, 933, 997, 1904,
	529, 1612, 2477, 2239, 1818, 2437, 2353, 1526, 1131, 56,
	2146, 626, 2276, 2140, 1678, 1677, 782, 1352, 183, 648,
	1542, 183, 1424, 722, 2245, 650, 1287, 651, 1288, 1161,
	638, 779, 183, 183, 1285, 926, 183, 183, 183, 2263,
	1703, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 1356,
	1490, 2270, 1507, 183, 1323, 1323, 1801, 2269, 183, 1124,
	183, 618, 183, 183, 183, 630, 629, 1505, 952, 183,
	2295, 2299, 183, 2261, 1909, 931, 1982, 1290, 1290, 2298,
	2266, 2264, 2334, 183, 183, 2262, 2274, 1408, 1758, 2267,
	931, 1405, 2150, 1978, 2156, 2149, 423, 1829, 924, 1565,
	1557, 2324, 1553, 1032, 1182, 2165, 932, 1110, 2322, 2165,
	2316, 1704, 1275, 2327, 979, 2165, 510, 1989, 739, 1725,
	1174, 869, 1416, 746, 2149, 745, 2332, 2590, 1346, 2149,
	2331, 1738, 412, 1103, 2325, 2148, 1102, 732, 2333, 2446,
	970, 969, 1243, 1925, 1624, 2572, 2453, 2153, 412, 2493,
	780, 412, 2347, 2338, 140, 1637, 137, 780, 139, 412,
	138, 2337, 1954, 83, 2148, 412, 32, 31, 103, 2148,
	102, 1559, 412, 101, 100, 99, 183, 1667, 183, 98,
	779, 183, 97, 96, 95, 1674, 94, 2359, 93, 183,
	92, 91, 90, 869, 1322, 779, 89, 88, 87, 86,
	85, 525, 522, 82, 412, 81, 1707, 2366, 529, 29,
	25, 529, 1559, 529, 2352, 412, 412, 107, 1713, 869,
	24, 78, 77, 2387, 2371, 27, 2389, 1637, 17, 183,
	2386, 11, 931, 21, 622, 2149, 183, 61, 2373, 1238,
	62, 933, 608, 2421, 183, 183, 931, 931, 60, 59,
	58, 2409, 13, 2388, 2419, 54, 2398, 2399, 53, 51,
	50, 780, 49, 2417, 183, 48, 2368, 2149, 2416, 183,
	2405, 47, 2415, 2427, 9, 2148, 183, 106, 45, 8,
	43, 411, 1559, 2426, 42, 781, 2428, 2429, 2448, 105,
	2412, 119, 781, 116, 2440, 118, 2434, 1322, 1322, 115,
	117, 183, 183, 121, 2442, 932, 120, 2148, 183, 2397,
	2443, 113, 111, 2150, 2450, 112, 931, 2465, 114, 2463,
	932, 183, 110, 1749, 2466, 931, 931, 109, 122, 39,
	38, 37, 36, 2431, 35, 2, 1, 0, 0, 412,
	412, 412, 2150, 412, 2469, 0, 0, 2150, 183, 0,
	183, 0, 2468, 183, 0, 779, 595, 1183, 0, 0,
	2474, 2475, 0, 0, 0, 0, 412, 0, 2489, 2502,
	0, 2451, 2504, 0, 0, 2503, 0, 0, 757, 0,
	0, 2490, 2457, 183, 0, 0, 2508, 0, 0, 0,
	0, 2506, 0, 0, 0, 2505, 781, 2518, 0, 0,
	183, 183, 183, 2519, 766, 770, 2520, 776, 183, 2538,
	780, 2149, 2531, 2495, 0, 0, 0, 0, 2535, 2536,
	2537, 2543, 183, 2540, 0, 780, 2541, 2542, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 2552, 2550, 0,
	933, 2556, 0, 0, 0, 0, 0, 0, 1289, 0,
	2560, 2148, 0, 2150, 2561, 933, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 2569, 2575, 2568, 0, 2576,
	0, 0, 0, 0, 0, 0, 932, 932, 0, 2165,
	0, 0, 779, 0, 779, 2150, 0, 0, 0, 0,
	0, 0, 2591, 2594, 0, 2595, 0, 2598, 0, 0,
	2600, 2597, 0, 2603, 2605, 2604, 0, 2601, 2607, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2585, 0, 2587, 412, 1325, 781, 932, 0, 0, 412,
	412, 1289, 1289, 412, 0, 932, 932, 0, 1624, 0,
	781, 1624, 0, 0, 0, 0, 0, 0, 0, 1914,
	0, 0, 0, 0, 0, 412, 1920, 1921, 0, 0,
	0, 1637, 0, 0, 1928, 780, 1832, 1833, 0, 0,
	1933, 1934, 1936, 1938, 1939, 0, 0, 933, 0, 0,
	412, 0, 0, 1948, 0, 0, 0, 1951, 951, 0,
	0, 933, 933, 0, 955, 0, 412, 0, 0, 0,
	0, 0, 1788, 1789, 0, 0, 1251, 0, 1251, 2150,
	529, 529, 0, 0, 412, 1323, 0, 0, 1977, 1847,
	0, 608, 0, 412, 0, 1987, 1324, 1325, 1325, 0,
	0, 1286, 412, 0, 0, 0, 1832, 1833, 1290, 1850,
	1851, 1852, 0, 0, 0, 1749, 0, 0, 0, 0,
	770, 0, 1323, 0, 0, 0, 0, 0, 1749, 0,
	0, 933, 0, 0, 0, 776, 0, 0, 0, 0,
	933, 933, 0, 0, 0, 1290, 0, 0, 1855, 1856,
	1857, 0, 0, 1838, 0, 0, 0, 0, 0, 1847,
	0, 0, 780, 0, 780, 412, 0, 0, 0, 0,
	781, 0, 1323, 0, 1104, 1105, 1106, 1107, 1108, 0,
	0, 0, 0, 0, 1117, 0, 1274, 0, 0, 0,
	0, 0, 0, 0, 1125, 1290, 0, 0, 0, 1324,
	1324, 0, 0, 0, 1286, 1286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2062, 0, 1848, 0, 0,
	0, 0, 1339, 1838, 0, 0, 0, 627, 75, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 0, 1853, 0, 770, 0, 0, 0,
	0, 1323, 1323, 0, 0, 0, 0, 0, 0, 0,
	1323, 1323, 0, 0, 0, 0, 0, 1848, 0, 0,
	0, 1849, 0, 75, 1290, 1290, 412, 781, 0, 781,
	0, 0, 1624, 1290, 1290, 0, 0, 0, 1179, 1179,
	0, 869, 1624, 1323, 0, 608, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2145, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 2166,
	0, 0, 0, 2166, 0, 0, 0, 0, 0, 2166,
	0, 0, 588, 0, 0, 596, 0, 0, 1637, 0,
	1251, 1849, 0, 2029, 2030, 1322, 0, 0, 2186, 0,
	0, 758, 75, 0, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 412, 412, 1511, 0,
	1843, 1841, 1842, 1834, 1835, 1836, 1837, 1839, 1840, 0,
	0, 1543, 1543, 1556, 2212, 0, 0, 1576, 0, 0,
	0, 1580, 1581, 1583, 2214, 1322, 2216, 412, 0, 0,
	0, 0, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 0, 2096, 0, 0, 757, 1204, 0, 0, 0,
	0, 1844, 1845, 1846, 0, 0, 0, 0, 0, 2240,
	1843, 1841, 1842, 1834, 1835, 1836, 1837, 1839, 1840, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 1322, 0,
	1323, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 412, 1322, 1322, 869, 0, 0, 0,
	0, 0, 0, 1322, 1322, 0, 0, 1624, 869, 0,
	0, 2272, 2273, 1637, 0, 0, 0, 0, 608, 608,
	0, 0, 0, 0, 0, 0, 480, 2145, 869, 0,
	0, 0, 0, 2306, 0, 2307, 1322, 412, 2309, 2310,
	0, 0, 0, 1237, 412, 0, 0, 2315, 0, 0,
	0, 0, 0, 0, 0, 0, 2145, 0, 869, 1674,
	67, 2145, 1289, 770, 0, 1256, 0, 1256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1406, 0, 1411, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 1289,
	0, 0, 0, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 0, 1470, 0, 1472, 1473,
	1474, 1475, 0, 68, 0, 0, 0, 0, 0, 1289,
	0, 1637, 0, 2372, 0, 1498, 2374, 0, 1325, 0,
	0, 0, 1117, 0, 412, 596, 0, 2145, 0, 128,
	70, 0, 71, 0, 0, 0, 0, 1323, 0, 0,
	0, 1538, 1539, 0, 0, 1555, 141, 1567, 1569, 1574,
	1577, 1578, 1579, 2166, 479, 1325, 0, 104, 0, 2145,
	1290, 0, 0, 1322, 412, 0, 0, 0, 0, 0,
	0, 869, 1289, 0, 0, 0, 143, 0, 0, 2212,
	2212, 0, 1832, 1833, 0, 1850, 1851, 1852, 0, 0,
	1790, 0, 0, 1323, 0, 0, 0, 1793, 2222, 2439,
	0, 0, 0, 0, 1624, 1325, 0, 0, 1289, 1289,
	0, 1251, 0, 142, 1809, 1810, 1290, 1289, 1289, 0,
	1324, 135, 0, 0, 0, 1286, 0, 0, 136, 0,
	0, 0, 0, 0, 0, 1847, 2455, 2456, 0, 0,
	0, 0, 0, 412, 0, 0, 1323, 0, 0, 0,
	1289, 127, 0, 0, 0, 0, 2473, 1324, 0, 0,
	0, 0, 1286, 0, 1858, 0, 588, 0, 1325, 1290,
	0, 1576, 1576, 1576, 2356, 0, 1871, 0, 0, 0,
	0, 0, 0, 2488, 0, 869, 0, 1113, 412, 1116,
	0, 0, 0, 0, 0, 0, 1121, 0, 0, 1838,
	0, 0, 0, 2145, 1325, 1325, 2286, 1324, 0, 2279,
	0, 757, 1286, 1325, 1325, 2380, 0, 0, 2439, 0,
	2277, 0, 0, 0, 0, 2281, 0, 757, 0, 0,
	1627, 0, 0, 0, 0, 869, 869, 869, 770, 0,
	1853, 0, 0, 412, 770, 2287, 1325, 0, 0, 0,
	0, 776, 0, 0, 40, 0, 0, 2549, 0, 0,
	0, 0, 0, 1848, 0, 41, 0, 0, 2280, 0,
	1324, 0, 0, 0, 0, 1286, 0, 0, 44, 0,
	1322, 0, 0, 1705, 0, 2433, 0, 0, 0, 0,
	0, 0, 0, 0, 776, 776, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 1324, 1324, 0, 0,
	0, 1286, 1286, 0, 0, 1324, 1324, 1289, 0, 0,
	1286, 1286, 0, 75, 0, 0, 0, 0, 1200, 0,
	0, 0, 0, 63, 0, 0, 1322, 1849, 0, 0,
	64, 0, 480, 65, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 1286, 0, 2282, 0, 2283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1772, 1773,
	0, 0, 0, 0, 1778, 0, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2285, 0, 1322,
	0, 0, 0, 0, 0, 0, 2288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1797, 0, 0, 0,
	0, 0, 1804, 1325, 0, 1808, 0, 0, 1752, 776,
	1754, 0, 770, 0, 0, 0, 0, 1844, 1845, 1846,
	0, 0, 1822, 0, 0, 0, 1843, 1841, 1842, 1834,
	1835, 1836, 1837, 1839, 1840, 1770, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 0, 0, 0, 0, 1117, 0, 0, 0,
	0, 2107, 0, 1574, 1574, 1574, 0, 0, 2284, 0,
	0, 0, 0, 0, 0, 128, 70, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1179,
	0, 0, 141, 0, 608, 0, 0, 1384, 0, 0,
	479, 0, 40, 104, 0, 1324, 0, 0, 0, 0,
	1286, 0, 0, 41, 130, 0, 0, 0, 0, 0,
	0, 0, 143, 0, 1289, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 2167, 0, 0, 0, 0,
	132, 2170, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 0, 52, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 0, 75, 55, 136, 0, 0, 57, 0, 0,
	1289, 63, 0, 0, 133, 0, 0, 1980, 64, 0,
	123, 65, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 588, 0, 0, 588, 588, 0, 1998,
	0, 0, 757, 66, 0, 0, 0, 0, 757, 757,
	1325, 0, 757, 0, 67, 0, 608, 608, 0, 0,
	0, 0, 0, 1289, 0, 0, 0, 0, 0, 608,
	0, 0, 0, 0, 1919, 0, 0, 0, 0, 0,
	0, 0, 0, 2023, 0, 0, 0, 0, 1418, 1488,
	0, 0, 0, 0, 2027, 0, 0, 2028, 0, 1945,
	0, 0, 596, 0, 0, 0, 1325, 1116, 0, 2033,
	0, 0, 0, 0, 0, 1959, 0, 0, 2041, 0,
	0, 0, 0, 0, 0, 0, 2045, 0, 0, 1998,
	0, 0, 0, 1971, 0, 0, 0, 68, 0, 0,
	0, 0, 1237, 69, 0, 0, 0, 0, 0, 2069,
	0, 1237, 1324, 2071, 0, 0, 0, 1286, 0, 1325,
	0, 0, 76, 128, 70, 0, 71, 0, 72, 0,
	134, 0, 0, 0, 758, 73, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 2101, 2102, 84, 0,
	1200, 104, 0, 0, 0, 2108, 2109, 2110, 0, 0,
	131, 0, 0, 75, 0, 0, 0, 0, 1324, 0,
	143, 75, 0, 1286, 2025, 0, 0, 0, 0, 0,
	0, 0, 2121, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 75, 0, 75, 0, 142, 0, 0,
	0, 0, 2142, 0, 0, 135, 0, 0, 0, 0,
	0, 1324, 136, 0, 75, 0, 1286, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2365, 0, 0, 1192, 127, 0, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 0, 0, 0, 1179, 0, 0, 0,
	0, 41, 0, 0, 0, 608, 0, 0, 2391, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 2402, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 0, 0, 0, 0,
	52, 0, 0, 0, 2224, 0, 0, 0, 2227, 2228,
	0, 0, 2230, 0, 0, 0, 0, 0, 0, 2232,
	0, 2234, 0, 0, 75, 0, 0, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 64, 2241, 480, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 0, 0, 0, 1089,
	2250, 0, 67, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 1705, 757, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 2480, 0, 0, 1078, 1488, 0, 0,
	0, 0, 0, 1075, 1832, 1833, 2217, 1850, 1851, 1852,
	2296, 0, 0, 0, 0, 0, 0, 1116, 0, 2497,
	2498, 0, 0, 0, 0, 0, 0, 0, 1832, 1833,
	0, 1850, 1851, 1852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	0, 1081, 1082, 1083, 1084, 0, 0, 1847, 0, 0,
	1064, 0, 1832, 1833, 0, 1850, 1851, 1852, 0, 0,
	0, 128, 70, 0, 71, 0, 0, 0, 2036, 0,
	0, 1847, 1093, 1101, 0, 2348, 2349, 0, 141, 0,
	0, 1116, 0, 0, 0, 0, 479, 1056, 1057, 104,
	0, 1099, 757, 1096, 1097, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1847, 2361, 1091, 143, 0,
	1059, 1838, 2364, 1100, 1079, 758, 0, 0, 0, 0,
	0, 758, 758, 0, 0, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 1838, 2308, 0, 0, 1090,
	1078, 0, 0, 2313, 0, 142, 0, 0, 0, 0,
	0, 0, 1853, 135, 0, 0, 2396, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 75, 1838,
	0, 0, 0, 1085, 0, 1848, 75, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 1081, 1082, 1083, 1084, 1848,
	0, 75, 0, 0, 1064, 75, 1094, 0, 0, 0,
	1853, 0, 0, 0, 0, 596, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1093, 1101, 0, 0,
	0, 0, 2445, 1848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 0, 2381, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 1849, 0, 1092, 608, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0, 0,
	0, 0, 0, 2414, 1874, 0, 0, 1849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 2517, 2517, 0, 0, 0, 0, 0, 0, 1844,
	1845, 1846, 1080, 0, 0, 0, 0, 2532, 1843, 1841,
	1842, 1834, 1835, 1836, 1837, 1839, 1840, 0, 0, 0,
	1094, 0, 0, 1844, 1845, 1846, 0, 2517, 0, 0,
	0, 0, 1843, 1841, 1842, 1834, 1835, 1836, 1837, 1839,
	1840, 0, 2462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1844, 1845, 1846,
	0, 0, 0, 75, 0, 0, 1843, 1841, 1842, 1834,
	1835, 1836, 1837, 1839, 1840, 2517, 0, 0, 758, 0,
	0, 0, 0, 0, 0, 0, 0, 2492, 0, 1092,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1095,
	0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066,
	0, 0, 1516, 0, 646, 635, 636, 633, 634, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 1513, 187, 0, 0, 0, 0, 663, 628,
	0, 0, 1705, 188, 189, 190, 350, 678, 352, 679,
	191, 680, 681, 0, 192, 356, 357, 193, 194, 631,
	662, 682, 683, 360, 0, 195, 674, 0, 654, 758,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 208, 0, 655,
	656, 658, 0, 657, 659, 209, 210, 413, 211, 684,
	212, 685, 686, 0, 213, 0, 214, 0, 215, 1514,
	0, 677, 217, 0, 218, 0, 0, 0, 619, 219,
	221, 220, 222, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 223, 224, 687, 688, 689, 0, 225, 0,
	226, 0, 0, 710, 0, 227, 675, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 671, 673, 712,
	0, 375, 235, 0, 232, 0, 711, 233, 690, 234,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 0,
	676, 715, 244, 245, 716, 758, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 614, 0, 643, 672, 258, 696, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 666, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 620, 295, 75, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 660, 309,
	296, 297, 310, 721, 311, 698, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 699, 316, 317, 668, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 700, 701, 0, 0, 329, 330, 669, 670,
	641, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 661, 339, 0, 403, 340, 341, 342, 404, 702,
	1512, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 615, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 613, 0, 0, 0, 0, 611, 612, 1515,
	0, 0, 0, 0, 0, 0, 621, 1510, 0, 0,
	0, 0, 624, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 778, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 784, 187, 785, 786, 787, 788, 349,
	789, 790, 791, 792, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 793, 192, 356, 357, 193, 194,
	794, 795, 358, 359, 360, 796, 195, 361, 797, 783,
	798, 196, 197, 198, 0, 200, 201, 202, 199, 799,
	203, 1116, 204, 205, 800, 708, 206, 207, 208, 801,
	802, 804, 803, 805, 806, 807, 209, 210, 413, 211,
	362, 212, 363, 364, 808, 213, 809, 214, 810, 215,
	811, 812, 216, 217, 813, 218, 814, 0, 815, 365,
	219, 221, 220, 222, 366, 367, 816, 709, 817, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	818, 226, 819, 820, 710, 821, 227, 371, 822, 372,
	823, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	712, 824, 375, 235, 825, 232, 826, 711, 233, 376,
	234, 377, 378, 379, 380, 381, 827, 382, 828, 713,
	236, 237, 238, 714, 239, 240, 241, 829, 243, 242,
	830, 383, 715, 244, 245, 716, 831, 246, 247, 832,
	833, 248, 0, 249, 250, 251, 253, 384, 252, 717,
	254, 255, 257, 256, 834, 835, 836, 385, 258, 386,
	259, 260, 837, 261, 838, 839, 262, 840, 841, 263,
	387, 718, 264, 719, 388, 265, 266, 267, 268, 269,
	842, 270, 389, 271, 390, 272, 843, 273, 274, 275,
	276, 277, 391, 278, 279, 844, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 845,
	292, 720, 293, 294, 392, 295, 0, 299, 300, 301,
	302, 303, 846, 305, 306, 393, 304, 307, 308, 847,
	309, 296, 297, 310, 721, 311, 394, 395, 312, 848,
	319, 313, 314, 298, 315, 318, 396, 316, 317, 397,
	849, 320, 850, 321, 322, 323, 324, 325, 326, 327,
	328, 851, 398, 399, 400, 852, 853, 329, 330, 401,
	402, 854, 331, 332, 333, 334, 855, 856, 335, 336,
	337, 338, 857, 339, 858, 403, 340, 341, 342, 404,
	405, 859, 860, 343, 861, 862, 863, 864, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 778,
	0, 0, 0, 0, 0, 1617, 0, 0, 0, 0,
	0, 0, 0, 0, 1618, 185, 186, 784, 187, 785,
	786, 787, 788, 349, 789, 790, 791, 792, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 793, 192,
	356, 357, 193, 194, 794, 795, 358, 359, 360, 796,
	195, 361, 797, 783, 798, 196, 197, 198, 0, 200,
	201, 202, 199, 799, 203, 0, 204, 205, 800, 708,
	206, 207, 208, 801, 802, 804, 803, 805, 806, 807,
	209, 210, 413, 211, 362, 212, 363, 364, 808, 213,
	809, 214, 810, 215, 811, 812, 216, 217, 813, 218,
	814, 0, 815, 365, 219, 221, 220, 222, 366, 367,
	816, 709, 817, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 818, 226, 819, 820, 710, 821,
	227, 371, 822, 372, 823, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 712, 824, 375, 235, 825, 232,
	826, 711, 233, 376, 234, 377, 378, 379, 380, 381,
	827, 382, 828, 713, 236, 237, 238, 714, 239, 240,
	241, 829, 243, 242, 830, 383, 715, 244, 245, 716,
	831, 246, 247, 832, 833, 248, 0, 249, 250, 251,
	253, 384, 252, 717, 254, 255, 257, 256, 834, 835,
	836, 385, 258, 386, 259, 260, 837, 261, 838, 839,
	262, 840, 841, 263, 387, 718, 264, 719, 388, 265,
	266, 267, 268, 269, 842, 270, 389, 271, 390, 272,
	843, 273, 274, 275, 276, 277, 391, 278, 279, 844,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 845, 292, 720, 293, 294, 392, 295,
	0, 299, 300, 301, 302, 303, 846, 305, 306, 393,
	304, 307, 308, 847, 309, 296, 297, 310, 721, 311,
	394, 395, 312, 848, 319, 313, 314, 298, 315, 318,
	396, 316, 317, 397, 849, 320, 850, 321, 322, 323,
	324, 325, 326, 327, 328, 851, 398, 399, 400, 852,
	853, 329, 330, 401, 402, 854, 331, 332, 333, 334,
	855, 856, 335, 336, 337, 338, 857, 339, 858, 403,
	340, 341, 342, 404, 405, 859, 860, 343, 861, 862,
	863, 864, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 778, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2268,
	185, 186, 784, 187, 785, 786, 787, 788, 349, 789,
	790, 791, 792, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 793, 192, 356, 357, 193, 194, 794,
	795, 358, 359, 360, 796, 195, 361, 797, 783, 798,
	196, 197, 198, 0, 200, 201, 202, 199, 799, 203,
	0, 204, 205, 800, 708, 206, 207, 208, 801, 802,
	804, 803, 805, 806, 807, 209, 210, 413, 211, 362,
	212, 363, 364, 808, 213, 809, 214, 810, 215, 811,
	812, 216, 217, 813, 218, 814, 0, 815, 365, 219,
	221, 220, 222, 366, 367, 816, 709, 817, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 818,
	226, 819, 820, 710, 821, 227, 371, 822, 372, 823,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 712,
	824, 375, 235, 825, 232, 826, 711, 233, 376, 234,
	377, 378, 379, 380, 381, 827, 382, 828, 713, 236,
	237, 238, 714, 239, 240, 241, 829, 243, 242, 830,
	383, 715, 244, 245, 716, 831, 246, 247, 832, 833,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 834, 835, 836, 385, 258, 386, 259,
	260, 837, 261, 838, 839, 262, 840, 841, 263, 387,
	718, 264, 719, 388, 265, 266, 267, 268, 269, 842,
	270, 389, 271, 390, 272, 843, 273, 274, 275, 276,
	277, 391, 278, 279, 844, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 845, 292,
	720, 293, 294, 392, 295, 0, 299, 300, 301, 302,
	303, 846, 305, 306, 393, 304, 307, 308, 847, 309,
	296, 297, 310, 721, 311, 394, 395, 312, 848, 319,
	313, 314, 298, 315, 318, 396, 316, 317, 397, 849,
	320, 850, 321, 322, 323, 324, 325, 326, 327, 328,
	851, 398, 399, 400, 852, 853, 329, 330, 401, 402,
	854, 331, 332, 333, 334, 855, 856, 335, 336, 337,
	338, 857, 339, 858, 403, 340, 341, 342, 404, 405,
	859, 860, 343, 861, 862, 863, 864, 344, 345, 346,
	347, 348, 0, 0, 778, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1233,
	185, 186, 784, 187, 785, 786, 787, 788, 349, 789,
	790, 791, 792, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 793, 192, 356, 357, 193, 194, 794,
	795, 358, 359, 360, 796, 195, 361, 797, 783, 798,
	196, 197, 198, 0, 200, 201, 202, 199, 799, 203,
	0, 204, 205, 800, 708, 206, 207, 208, 801, 802,
	804, 803, 805, 806, 807, 209, 210, 413, 211, 362,
	212, 363, 364, 808, 213, 809, 214, 810, 215, 811,
	812, 216, 217, 813, 218, 814, 0, 815, 365, 219,
	221, 220, 222, 366, 367, 816, 709, 817, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 818,
	226, 819, 820, 710, 821, 227, 371, 822, 372, 823,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 712,
	824, 375, 235, 825, 232, 826, 711, 233, 376, 234,
	377, 378, 379, 380, 381, 827, 382, 828, 713, 236,
	237, 238, 714, 239, 240, 241, 829, 243, 242, 830,
	383, 715, 244, 245, 716, 831, 246, 247, 832, 833,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 834, 835, 836, 385, 258, 386, 259,
	260, 837, 261, 838, 839, 262, 840, 841, 263, 387,
	718, 264, 719, 388, 265, 266, 267, 268, 269, 842,
	270, 389, 271, 390, 272, 843, 273, 274, 275, 276,
	277, 391, 278, 279, 844, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 845, 292,
	720, 293, 294, 392, 295, 0, 299, 300, 301, 302,
	303, 846, 305, 306, 393, 304, 307, 308, 847, 309,
	296, 297, 310, 721, 311, 394, 395, 312, 848, 319,
	313, 314, 298, 315, 318, 396, 316, 317, 397, 849,
	320, 850, 321, 322, 323, 324, 325, 326, 327, 328,
	851, 398, 399, 400, 852, 853, 329, 330, 401, 402,
	854, 331, 332, 333, 334, 855, 856, 335, 336, 337,
	338, 857, 339, 858, 403, 340, 341, 342, 404, 405,
	859, 860, 343, 861, 862, 863, 864, 344, 345, 346,
	347, 348, 646, 635, 636, 633, 634, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 663, 628, 0, 0,
	0, 188, 189, 190, 350, 678, 352, 679, 191, 680,
	681, 0, 192, 356, 357, 193, 194, 631, 662, 682,
	683, 360, 0, 195, 674, 0, 654, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 708, 206, 207, 208, 0, 655, 656, 658,
	0, 657, 659, 209, 210, 413, 211, 684, 212, 685,
	686, 609, 213, 0, 214, 0, 215, 0, 0, 677,
	217, 0, 218, 0, 0, 0, 619, 219, 221, 220,
	222, 664, 665, 642, 709, 0, 0, 0, 0, 0,
	223, 224, 687, 688, 689, 0, 225, 0, 226, 0,
	0, 710, 0, 227, 675, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 671, 673, 712, 0, 375,
	235, 0, 232, 0, 711, 233, 690, 234, 691, 692,
	693, 694, 695, 0, 653, 0, 713, 236, 237, 238,
	714, 239, 240, 241, 0, 243, 242, 0, 676, 715,
	244, 245, 716, 0, 246, 247, 0, 0, 248, 0,
	249, 250, 251, 253, 384, 252, 717, 254, 255, 257,
	256, 614, 0, 643, 672, 258, 696, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 387, 718, 264,
	719, 666, 265, 266, 267, 268, 269, 0, 270, 667,
	271, 390, 272, 0, 273, 274, 275, 276, 277, 697,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 720, 293,
	294, 620, 295, 0, 299, 300, 301, 302, 303, 141,
	305, 306, 393, 304, 307, 308, 660, 309, 296, 297,
	310, 721, 311, 698, 395, 312, 0, 319, 313, 314,
	298, 315, 318, 699, 316, 317, 668, 0, 320, 143,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 398,
	700, 701, 0, 0, 329, 330, 669, 670, 641, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 661,
	339, 0, 403, 340, 341, 342, 934, 702, 0, 0,
	343, 0, 0, 0, 135, 344, 345, 346, 347, 348,
	615, 136, 597, 0, 646, 635, 636, 633, 634, 625,
	613, 0, 0, 0, 0, 611, 612, 0, 0, 0,
	185, 186, 0, 187, 1119, 0, 0, 0, 663, 628,
	624, 0, 0, 188, 189, 190, 350, 678, 352, 679,
	191, 680, 681, 0, 192, 356, 357, 193, 194, 631,
	662, 682, 683, 360, 0, 195, 674, 0, 654, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 208, 0, 655,
	656, 658, 0, 657, 659, 209, 210, 413, 211, 684,
	212, 685, 686, 0, 213, 0, 214, 0, 215, 0,
	0, 677, 217, 0, 218, 0, 0, 0, 619, 219,
	221, 220, 222, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 223, 224, 687, 688, 689, 0, 225, 0,
	226, 0, 0, 710, 0, 227, 675, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 671, 673, 712,
	0, 375, 235, 0, 232, 0, 711, 233, 690, 234,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 0,
	676, 715, 244, 245, 716, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 614, 0, 643, 672, 258, 696, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 666, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 620, 295, 0, 299, 300, 301, 302,
	303, 141, 305, 306, 393, 304, 307, 308, 660, 309,
	296, 297, 310, 721, 311, 698, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 699, 316, 317, 668, 0,
	320, 143, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 700, 701, 0, 0, 329, 330, 669, 670,
	641, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 661, 339, 0, 403, 340, 341, 342, 934, 702,
	0, 0, 343, 0, 0, 0, 135, 344, 345, 346,
	347, 348, 615, 136, 646, 635, 636, 633, 634, 625,
	0, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	185, 186, 0, 187, 0, 0, 1119, 0, 663, 628,
	0, 0, 624, 188, 189, 190, 350, 678, 352, 679,
	191, 680, 681, 0, 192, 356, 357, 193, 194, 631,
	662, 682, 683, 360, 0, 195, 674, 0, 654, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 208, 0, 655,
	656, 658, 0, 657, 659, 209, 210, 413, 211, 684,
	212, 685, 686, 0, 213, 0, 214, 0, 215, 0,
	0, 677, 217, 0, 218, 0, 0, 0, 619, 219,
	221, 220, 222, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 223, 224, 687, 688, 689, 0, 225, 0,
	226, 0, 0, 710, 0, 227, 675, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 671, 673, 712,
	0, 375, 235, 0, 232, 0, 711, 233, 690, 234,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 0,
	676, 715, 244, 245, 716, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 614, 0, 643, 672, 258, 696, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 666, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 620, 295, 0, 299, 300, 301, 302,
	303, 141, 305, 306, 393, 304, 307, 308, 660, 309,
	296, 297, 310, 721, 311, 698, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 699, 316, 317, 668, 0,
	320, 143, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 700, 701, 0, 0, 329, 330, 669, 670,
	641, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 661, 339, 0, 403, 340, 341, 342, 934, 702,
	0, 0, 343, 0, 0, 0, 135, 344, 345, 346,
	347, 348, 615, 136, 646, 635, 636, 633, 634, 625,
	0, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	185, 186, 0, 187, 0, 0, 1119, 0, 663, 628,
	0, 0, 624, 188, 189, 190, 350, 678, 352, 679,
	191, 680, 681, 1570, 192, 356, 357, 193, 194, 631,
	662, 682, 683, 360, 0, 195, 674, 0, 654, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 208, 0, 655,
	656, 658, 0, 657, 659, 209, 210, 413, 211, 684,
	212, 685, 686, 0, 213, 0, 214, 0, 215, 0,
	0, 677, 217, 0, 218, 0, 0, 0, 619, 219,
	221, 220, 222, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 223, 224, 687, 688, 689, 0, 225, 0,
	226, 0, 1575, 710, 0, 227, 675, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 671, 673, 712,
	0, 375, 235, 0, 232, 0, 711, 233, 690, 234,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 1571,
	676, 715, 244, 245, 716, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 614, 0, 643, 672, 258, 696, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 666, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 620, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 660, 309,
	296, 297, 310, 721, 311, 698, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 699, 316, 317, 668, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 700, 701, 0, 1572, 329, 330, 669, 670,
	641, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 661, 339, 0, 403, 340, 341, 342, 404, 702,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 615, 605, 0, 646, 635, 636, 633, 634,
	625, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	0, 185, 186, 0, 187, 0, 621, 0, 0, 663,
	628, 0, 624, 0, 188, 189, 190, 350, 678, 352,
	679, 191, 680, 681, 0, 192, 356, 357, 193, 194,
	631, 662, 682, 683, 360, 0, 195, 674, 0, 654,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 708, 206, 207, 208, 0,
	655, 656, 658, 0, 657, 659, 209, 210, 413, 211,
	684, 212, 685, 686, 609, 213, 0, 214, 0, 215,
	0, 0, 677, 217, 0, 218, 0, 0, 0, 619,
	219, 221, 220, 222, 664, 665, 642, 709, 0, 0,
	0, 0, 0, 223, 224, 687, 688, 689, 0, 225,
	0, 226, 0, 0, 710, 0, 227, 675, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 671, 673,
	712, 0, 375, 235, 0, 232, 0, 711, 233, 690,
	234, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	236, 237, 238, 714, 239, 240, 241, 0, 243, 242,
	0, 676, 715, 244, 245, 716, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 717,
	254, 255, 257, 256, 614, 0, 643, 672, 258, 696,
	259, 260, 0, 261, 607, 0, 262, 0, 0, 263,
	387, 718, 264, 719, 666, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 720, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 660,
	309, 296, 297, 310, 721, 311, 698, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 699, 316, 317, 668,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 700, 701, 0, 0, 329, 330, 669,
	670, 641, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 661, 339, 0, 403, 340, 341, 342, 404,
	702, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 615, 0, 646, 635, 636, 633, 634,
	625, 0, 0, 613, 0, 0, 0, 0, 611, 612,
	0, 185, 186, 0, 187, 0, 0, 621, 0, 663,
	628, 0, 0, 624, 188, 189, 190, 350, 678, 352,
	679, 191, 680, 681, 0, 192, 356, 357, 193, 194,
	631, 662, 682, 683, 360, 0, 195, 674, 0, 654,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 708, 206, 207, 208, 0,
	655, 656, 658, 0, 657, 659, 209, 210, 413, 211,
	684, 212, 685, 686, 0, 213, 0, 214, 0, 215,
	0, 0, 677, 217, 0, 218, 0, 0, 0, 619,
	219, 221, 220, 222, 664, 665, 642, 709, 0, 0,
	0, 0, 0, 223, 224, 687, 688, 689, 0, 225,
	0, 226, 0, 0, 710, 0, 227, 675, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 671, 673,
	712, 0, 375, 235, 0, 232, 0, 711, 233, 690,
	234, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	236, 237, 238, 714, 239, 240, 241, 0, 243, 242,
	0, 676, 715, 244, 245, 716, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 717,
	254, 255, 257, 256, 614, 2195, 643, 672, 258, 696,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 718, 264, 719, 666, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 720, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 660,
	309, 296, 297, 310, 721, 311, 698, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 699, 316, 317, 668,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 700, 701, 0, 0, 329, 330, 669,
	670, 641, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 661, 339, 0, 403, 340, 341, 342, 404,
	702, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 615, 0, 646, 635, 636, 633, 634,
	625, 0, 0, 613, 0, 0, 0, 0, 611, 612,
	1180, 185, 186, 0, 187, 0, 0, 621, 0, 663,
	628, 0, 0, 624, 188, 189, 190, 350, 678, 352,
	679, 191, 680, 681, 0, 192, 356, 357, 193, 194,
	631, 662, 682, 683, 360, 0, 195, 674, 0, 654,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 708, 206, 207, 208, 0,
	655, 656, 658, 0, 657, 659, 209, 210, 413, 211,
	684, 212, 685, 686, 0, 213, 0, 214, 0, 215,
	0, 0, 677, 217, 0, 218, 0, 0, 0, 619,
	219, 221, 220, 222, 664, 665, 642, 709, 0, 0,
	0, 0, 0, 223, 224, 687, 688, 689, 0, 225,
	0, 226, 0, 0, 710, 0, 227, 675, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 671, 673,
	712, 0, 375, 235, 1420, 232, 0, 711, 233, 690,
	234, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	236, 237, 238, 714, 239, 240, 241, 0, 243, 242,
	0, 676, 715, 244, 245, 716, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 717,
	254, 255, 257, 256, 614, 0, 643, 672, 258, 696,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 718, 264, 719, 666, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 390, 272, 1419, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 720, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 660,
	309, 296, 297, 310, 721, 311, 698, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 699, 316, 317, 668,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 700, 701, 0, 0, 329, 330, 669,
	670, 641, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 661, 339, 0, 403, 340, 341, 342, 404,
	702, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 615, 0, 646, 635, 636, 633, 634,
	625, 0, 0, 613, 0, 0, 0, 0, 611, 612,
	0, 185, 186, 0, 187, 0, 0, 621, 0, 663,
	628, 0, 0, 624, 188, 189, 190, 350, 678, 352,
	679, 191, 680, 681, 0, 192, 356, 357, 193, 194,
	631, 662, 682, 683, 360, 0, 195, 674, 0, 654,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 708, 206, 207, 208, 0,
	655, 656, 658, 0, 657, 659, 209, 210, 413, 211,
	684, 212, 685, 686, 609, 213, 0, 214, 0, 215,
	0, 0, 677, 217, 0, 218, 0, 0, 0, 619,
	219, 221, 220, 222, 664, 665, 642, 709, 0, 0,
	0, 0, 0, 223, 224, 687, 688, 689, 0, 225,
	0, 226, 0, 0, 710, 0, 227, 675, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 671, 673,
	712, 0, 375, 235, 0, 232, 0, 711, 233, 690,
	234, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	236, 237, 238, 714, 239, 240, 241, 0, 243, 242,
	0, 676, 715, 244, 245, 716, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 717,
	254, 255, 257, 256, 614, 0, 643, 672, 258, 696,
	259, 260, 0, 261, 607, 0, 262, 0, 0, 263,
	387, 718, 264, 719, 666, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 720, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 660,
	309, 296, 297, 310, 721, 311, 698, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 699, 316, 317, 668,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 700, 701, 0, 0, 329, 330, 669,
	670, 641, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 661, 339, 0, 403, 340, 341, 342, 404,
	702, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 615, 0, 646, 635, 636, 633, 634,
	625, 0, 0, 613, 0, 0, 0, 0, 611, 612,
	0, 185, 186, 0, 187, 0, 0, 621, 0, 663,
	628, 0, 0, 624, 188, 189, 190, 350, 678, 352,
	679, 191, 680, 681, 0, 192, 356, 357, 193, 194,
	631, 662, 682, 683, 360, 0, 195, 674, 0, 654,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 708, 206, 207, 208, 0,
	655, 656, 658, 0, 657, 659, 209, 210, 413, 211,
	684, 212, 685, 686, 609, 213, 0, 214, 0, 215,
	0, 0, 677, 217, 0, 218, 0, 0, 0, 619,
	219, 221, 220, 222, 664, 665, 642, 709, 0, 0,
	0, 0, 0, 223, 224, 687, 688, 689, 0, 225,
	0, 226, 0, 0, 710, 0, 227, 675, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 671, 673,
	712, 0, 375, 235, 0, 232, 0, 711, 233, 690,
	234, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	236, 237, 238, 714, 239, 240, 241, 0, 243, 242,
	0, 676, 715, 244, 245, 716, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 717,
	254, 255, 257, 256, 614, 0, 643, 672, 258, 696,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 718, 264, 719, 666, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 720, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 660,
	309, 296, 297, 310, 721, 311, 698, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 699, 316, 317, 668,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 700, 701, 0, 0, 329, 330, 669,
	670, 641, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 661, 339, 0, 403, 340, 341, 342, 404,
	702, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 615, 0, 646, 635, 636, 633, 634,
	625, 0, 0, 613, 0, 0, 0, 0, 611, 612,
	0, 185, 186, 0, 187, 0, 0, 621, 0, 663,
	628, 0, 0, 624, 188, 189, 190, 350, 678, 352,
	679, 191, 680, 681, 0, 192, 356, 357, 193, 194,
	631, 662, 682, 683, 360, 0, 195, 674, 0, 654,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 708, 206, 207, 208, 0,
	655, 656, 658, 0, 657, 659, 209, 210, 413, 211,
	684, 212, 685, 686, 0, 213, 0, 214, 0, 215,
	0, 0, 677, 217, 0, 218, 0, 0, 0, 619,
	219, 221, 220, 222, 664, 665, 642, 709, 0, 0,
	0, 0, 0, 223, 224, 687, 688, 689, 0, 225,
	0, 226, 0, 0, 710, 0, 227, 675, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 671, 673,
	712, 0, 375, 235, 0, 232, 0, 711, 233, 690,
	234, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	236, 237, 238, 714, 239, 240, 241, 0, 243, 242,
	0, 676, 715, 244, 245, 716, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 717,
	254, 255, 257, 256, 614, 0, 643, 672, 258, 696,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 718, 264, 719, 666, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 720, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 660,
	309, 296, 297, 310, 721, 311, 698, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 699, 316, 317, 668,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 700, 701, 0, 0, 329, 330, 669,
	670, 641, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 661, 339, 0, 403, 340, 341, 342, 404,
	702, 2048, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 615, 0, 646, 635, 636, 633, 634,
	625, 0, 0, 613, 0, 0, 0, 0, 611, 612,
	0, 185, 186, 0, 187, 0, 0, 621, 0, 663,
	628, 0, 0, 624, 188, 189, 190, 350, 678, 352,
	679, 191, 680, 681, 0, 192, 356, 357, 193, 194,
	631, 662, 682, 683, 360, 0, 195, 674, 0, 654,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 708, 206, 207, 208, 0,
	655, 656, 658, 0, 657, 659, 209, 210, 413, 211,
	684, 212, 685, 686, 0, 213, 0, 214, 0, 215,
	0, 0, 677, 217, 0, 218, 0, 0, 0, 619,
	219, 221, 220, 222, 664, 665, 642, 709, 0, 0,
	0, 0, 0, 223, 224, 687, 688, 689, 0, 225,
	0, 226, 0, 0, 710, 0, 227, 675, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 671, 673,
	712, 0, 375, 235, 0, 232, 0, 711, 233, 690,
	234, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	236, 237, 238, 714, 239, 240, 241, 0, 243, 242,
	0, 676, 715, 244, 245, 716, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 717,
	254, 255, 257, 256, 614, 0, 643, 672, 258, 696,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 718, 264, 719, 666, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 720, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 660,
	309, 296, 297, 310, 721, 311, 698, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 699, 316, 317, 668,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 700, 701, 0, 0, 329, 330, 669,
	670, 641, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 661, 339, 0, 403, 340, 341, 342, 404,
	702, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 615, 0, 646, 635, 636, 633, 634,
	625, 0, 0, 613, 0, 0, 0, 0, 611, 612,
	1180, 185, 186, 0, 187, 0, 0, 621, 0, 663,
	628, 0, 0, 624, 188, 189, 190, 350, 678, 352,
	679, 191, 680, 681, 0, 192, 356, 357, 193, 194,
	631, 662, 682, 683, 360, 0, 195, 674, 0, 654,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 708, 206, 207, 208, 0,
	655, 656, 658, 0, 657, 659, 209, 210, 413, 211,
	684, 212, 685, 686, 0, 213, 0, 214, 0, 215,
	0, 0, 677, 217, 0, 218, 0, 0, 0, 619,
	219, 221, 220, 222, 664, 665, 642, 709, 0, 0,
	0, 0, 0, 223, 224, 687, 688, 689, 0, 225,
	0, 226, 0, 1575, 710, 0, 227, 675, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 671, 673,
	712, 0, 375, 235, 0, 232, 0, 711, 233, 690,
	234, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	236, 237, 238, 714, 239, 240, 241, 0, 243, 242,
	0, 676, 715, 244, 245, 716, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 717,
	254, 255, 257, 256, 614, 0, 643, 672, 258, 696,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 718, 264, 719, 666, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 720, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 660,
	309, 296, 297, 310, 721, 311, 698, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 699, 316, 317, 668,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 700, 701, 0, 0, 329, 330, 669,
	670, 641, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 661, 339, 0, 403, 340, 341, 342, 404,
	702, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 615, 1620, 0, 646, 635, 636, 633,
	634, 625, 0, 613, 0, 0, 0, 0, 611, 612,
	0, 0, 185, 186, 0, 187, 0, 621, 0, 0,
	663, 628, 0, 624, 0, 188, 189, 190, 350, 678,
	352, 679, 191, 680, 681, 0, 192, 356, 357, 193,
	194, 631, 662, 682, 683, 360, 0, 195, 674, 0,
	654, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 708, 206, 207, 208,
	0, 655, 656, 658, 0, 657, 659, 209, 210, 413,
	211, 684, 212, 685, 686, 0, 213, 0, 214, 0,
	215, 0, 0, 677, 217, 0, 218, 0, 0, 0,
	619, 219, 221, 220, 222, 664, 665, 642, 709, 0,
	0, 0, 0, 0, 223, 224, 687, 688, 689, 0,
	225, 0, 226, 0, 0, 710, 0, 227, 675, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 671,
	673, 712, 0, 375, 235, 0, 232, 0, 711, 233,
	690, 234, 691, 692, 693, 694, 695, 0, 653, 0,
	713, 236, 237, 238, 714, 239, 240, 241, 0, 243,
	242, 0, 676, 715, 244, 245, 716, 0, 246, 247,
	0, 0, 248, 0, 249, 250, 251, 253, 384, 252,
	717, 254, 255, 257, 256, 614, 0, 643, 672, 258,
	696, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 387, 718, 264, 719, 666, 265, 266, 267, 268,
	269, 0, 270, 667, 271, 390, 272, 0, 273, 274,
	275, 276, 277, 697, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 720, 293, 294, 620, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 393, 304, 307, 308,
	660, 309, 296, 297, 310, 721, 311, 698, 395, 312,
	0, 319, 313, 314, 298, 315, 318, 699, 316, 317,
	668, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 398, 700, 701, 0, 0, 329, 330,
	669, 670, 641, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 661, 339, 0, 403, 340, 341, 342,
	404, 702, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 615, 1584, 0, 646, 635, 636,
	633, 634, 625, 0, 613, 0, 0, 0, 0, 611,
	612, 0, 0, 185, 186, 0, 187, 0, 621, 0,
	0, 663, 628, 0, 624, 0, 188, 189, 190, 350,
	678, 352, 679, 191, 680, 681, 0, 192, 356, 357,
	193, 194, 631, 662, 682, 683, 360, 0, 195, 674,
	0, 654, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 708, 206, 207,
	208, 0, 655, 656, 658, 0, 657, 659, 209, 210,
	413, 211, 684, 212, 685, 686, 0, 213, 0, 214,
	0, 215, 0, 0, 677, 217, 0, 218, 0, 0,
	0, 619, 219, 221, 220, 222, 664, 665, 642, 709,
	0, 0, 0, 0, 0, 223, 224, 687, 688, 689,
	0, 225, 0, 226, 0, 0, 710, 0, 227, 675,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	671, 673, 712, 0, 375, 235, 0, 232, 0, 711,
	233, 690, 234, 691, 692, 693, 694, 695, 0, 653,
	0, 713, 236, 237, 238, 714, 239, 240, 241, 0,
	243, 242, 0, 676, 715, 244, 245, 716, 0, 246,
	247, 0, 0, 248, 0, 249, 250, 251, 253, 384,
	252, 717, 254, 255, 257, 256, 614, 0, 643, 672,
	258, 696, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 387, 718, 264, 719, 666, 265, 266, 267,
	268, 269, 0, 270, 667, 271, 390, 272, 0, 273,
	274, 275, 276, 277, 697, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 720, 293, 294, 620, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 393, 304, 307,
	308, 660, 309, 296, 297, 310, 721, 311, 698, 395,
	312, 0, 319, 313, 314, 298, 315, 318, 699, 316,
	317, 668, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 398, 700, 701, 0, 0, 329,
	330, 669, 670, 641, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 661, 339, 0, 403, 340, 341,
	342, 404, 702, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 615, 1582, 0, 646, 635,
	636, 633, 634, 625, 0, 613, 0, 0, 0, 0,
	611, 612, 0, 0, 185, 186, 0, 187, 0, 621,
	0, 0, 663, 628, 0, 624, 0, 188, 189, 190,
	350, 678, 352, 679, 191, 680, 681, 0, 192, 356,
	357, 193, 194, 631, 662, 682, 683, 360, 0, 195,
	674, 0, 654, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 708, 206,
	207, 208, 0, 655, 656, 658, 0, 657, 659, 209,
	210, 413, 211, 684, 212, 685, 686, 0, 213, 0,
	214, 0, 215, 0, 0, 677, 217, 0, 218, 0,
	0, 0, 619, 219, 221, 220, 222, 664, 665, 642,
	709, 0, 0, 0, 0, 0, 223, 224, 687, 688,
	689, 0, 225, 0, 226, 0, 0, 710, 0, 227,
	675, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 671, 673, 712, 0, 375, 235, 0, 232, 0,
	711, 233, 690, 234, 691, 692, 693, 694, 695, 0,
	653, 0, 713, 236, 237, 238, 714, 239, 240, 241,
	0, 243, 242, 0, 676, 715, 244, 245, 716, 0,
	246, 247, 0, 0, 248, 0, 249, 250, 251, 253,
	384, 252, 717, 254, 255, 257, 256, 614, 0, 643,
	672, 258, 696, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 387, 718, 264, 719, 666, 265, 266,
	267, 268, 269, 0, 270, 667, 271, 390, 272, 0,
	273, 274, 275, 276, 277, 697, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 720, 293, 294, 620, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 393, 304,
	307, 308, 660, 309, 296, 297, 310, 721, 311, 698,
	395, 312, 0, 319, 313, 314, 298, 315, 318, 699,
	316, 317, 668, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 398, 700, 701, 0, 0,
	329, 330, 669, 670, 641, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 661, 339, 0, 403, 340,
	341, 342, 404, 702, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 615, 1566, 0, 646,
	635, 636, 633, 634, 625, 0, 613, 0, 0, 0,
	0, 611, 612, 0, 0, 185, 186, 0, 187, 0,
	621, 0, 0, 663, 628, 0, 624, 0, 188, 189,
	190, 350, 678, 352, 679, 191, 680, 681, 0, 192,
	356, 357, 193, 194, 631, 662, 682, 683, 360, 0,
	195, 674, 0, 654, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 708,
	206, 207, 208, 0, 655, 656, 658, 0, 657, 659,
	209, 210, 413, 211, 684, 212, 685, 686, 0, 213,
	0, 214, 0, 215, 0, 0, 677, 217, 0, 218,
	0, 0, 0, 619, 219, 221, 220, 222, 664, 665,
	642, 709, 0, 0, 0, 0, 0, 223, 224, 687,
	688, 689, 0, 225, 0, 226, 0, 0, 710, 0,
	227, 675, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 671, 673, 712, 0, 375, 235, 0, 232,
	0, 711, 233, 690, 234, 691, 692, 693, 694, 695,
	0, 653, 0, 713, 236, 237, 238, 714, 239, 240,
	241, 0, 243, 242, 0, 676, 715, 244, 245, 716,
	0, 246, 247, 0, 0, 248, 0, 249, 250, 251,
	253, 384, 252, 717, 254, 255, 257, 256, 614, 0,
	643, 672, 258, 696, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 387, 718, 264, 719, 666, 265,
	266, 267, 268, 269, 0, 270, 667, 271, 390, 272,
	0, 273, 274, 275, 276, 277, 697, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 720, 293, 294, 620, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 393,
	304, 307, 308, 660, 309, 296, 297, 310, 721, 311,
	698, 395, 312, 0, 319, 313, 314, 298, 315, 318,
	699, 316, 317, 668, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 398, 700, 701, 0,
	0, 329, 330, 669, 670, 641, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 661, 339, 0, 403,
	340, 341, 342, 404, 702, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 615, 1554, 0,
	646, 635, 636, 633, 634, 625, 0, 613, 0, 0,
	0, 0, 611, 612, 0, 0, 185, 186, 0, 187,
	0, 621, 0, 0, 663, 628, 0, 624, 0, 188,
	189, 190, 350, 678, 352, 679, 191, 680, 681, 0,
	192, 356, 357, 193, 194, 631, 662, 682, 683, 360,
	0, 195, 674, 0, 654, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	708, 206, 207, 208, 0, 655, 656, 658, 0, 657,
	659, 209, 210, 413, 211, 684, 212, 685, 686, 0,
	213, 0, 214, 0, 215, 0, 0, 677, 217, 0,
	218, 0, 0, 0, 619, 219, 221, 220, 222, 664,
	665, 642, 709, 0, 0, 0, 0, 0, 223, 224,
	687, 688, 689, 0, 225, 0, 226, 0, 0, 710,
	0, 227, 675, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 671, 673, 712, 0, 375, 235, 0,
	232, 0, 711, 233, 690, 234, 691, 692, 693, 694,
	695, 0, 653, 0, 713, 236, 237, 238, 714, 239,
	240, 241, 0, 243, 242, 0, 676, 715, 244, 245,
	716, 0, 246, 247, 0, 0, 248, 0, 249, 250,
	251, 253, 384, 252, 717, 254, 255, 257, 256, 614,
	0, 643, 672, 258, 696, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 387, 718, 264, 719, 666,
	265, 266, 267, 268, 269, 0, 270, 667, 271, 390,
	272, 0, 273, 274, 275, 276, 277, 697, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 720, 293, 294, 620,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	393, 304, 307, 308, 660, 309, 296, 297, 310, 721,
	311, 698, 395, 312, 0, 319, 313, 314, 298, 315,
	318, 699, 316, 317, 668, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 398, 700, 701,
	0, 0, 329, 330, 669, 670, 641, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 661, 339, 0,
	403, 340, 341, 342, 404, 702, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 615, 1552,
	0, 1544, 635, 636, 633, 634, 625, 0, 613, 0,
	0, 0, 0, 611, 612, 0, 0, 185, 186, 0,
	187, 0, 621, 0, 0, 663, 628, 0, 624, 0,
	188, 189, 190, 350, 678, 352, 679, 191, 680, 681,
	0, 192, 356, 357, 193, 194, 631, 662, 682, 683,
	360, 0, 195, 674, 0, 654, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 708, 206, 207, 208, 0, 655, 656, 658, 0,
	657, 659, 209, 210, 413, 211, 684, 1547, 685, 686,
	0, 213, 0, 214, 0, 215, 0, 0, 677, 217,
	0, 218, 0, 0, 0, 619, 219, 221, 220, 222,
	664, 665, 642, 709, 0, 0, 0, 0, 0, 223,
	224, 687, 688, 689, 0, 225, 0, 226, 0, 0,
	710, 0, 227, 675, 0, 372, 0, 0, 228, 1548,
	0, 0, 230, 231, 671, 673, 712, 0, 375, 235,
	0, 232, 0, 711, 233, 690, 234, 691, 692, 693,
	694, 695, 0, 653, 0, 713, 236, 237, 238, 714,
	239, 240, 241, 0, 243, 242, 0, 676, 715, 244,
	245, 716, 0, 246, 247, 0, 0, 248, 0, 249,
	1549, 1546, 253, 384, 252, 717, 254, 255, 257, 256,
	614, 0, 643, 672, 258, 696, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 387, 718, 264, 719,
	666, 265, 266, 267, 268, 269, 0, 270, 667, 271,
	390, 272, 0, 273, 274, 275, 276, 277, 697, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 720, 293, 294,
	620, 295, 0, 299, 300, 301, 302, 1550, 0, 305,
	306, 393, 304, 307, 308, 660, 309, 296, 297, 310,
	721, 311, 698, 395, 312, 0, 319, 313, 314, 298,
	315, 318, 699, 316, 317, 668, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 398, 700,
	701, 0, 0, 329, 330, 669, 670, 641, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 661, 339,
	0, 403, 340, 341, 342, 404, 702, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 1545, 348, 615,
	1541, 0, 1544, 635, 636, 633, 634, 625, 0, 613,
	0, 0, 0, 0, 611, 612, 0, 0, 185, 186,
	0, 187, 0, 621, 0, 0, 663, 628, 0, 624,
	0, 188, 189, 190, 350, 678, 352, 679, 191, 680,
	681, 0, 192, 356, 357, 193, 194, 631, 662, 682,
	683, 360, 0, 195, 674, 0, 654, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 708, 206, 207, 208, 0, 655, 656, 658,
	0, 657, 659, 209, 210, 413, 211, 684, 1547, 685,
	686, 0, 213, 0, 214, 0, 215, 0, 0, 677,
	217, 0, 218, 0, 0, 0, 619, 219, 221, 220,
	222, 664, 665, 642, 709, 0, 0, 0, 0, 0,
	223, 224, 687, 688, 689, 0, 225, 0, 226, 0,
	0, 710, 0, 227, 675, 0, 372, 0, 0, 228,
	1548, 0, 0, 230, 231, 671, 673, 712, 0, 375,
	235, 0, 232, 0, 711, 233, 690, 234, 691, 692,
	693, 694, 695, 0, 653, 0, 713, 236, 237, 238,
	714, 239, 240, 241, 0, 243, 242, 0, 676, 715,
	244, 245, 716, 0, 246, 247, 0, 0, 248, 0,
	249, 1549, 1546, 253, 384, 252, 717, 254, 255, 257,
	256, 614, 0, 643, 672, 258, 696, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 387, 718, 264,
	719, 666, 265, 266, 267, 268, 269, 0, 270, 667,
	271, 390, 272, 0, 273, 274, 275, 276, 277, 697,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 720, 293,
	294, 620, 295, 0, 299, 300, 301, 302, 1550, 0,
	305, 306, 393, 304, 307, 308, 660, 309, 296, 297,
	310, 721, 311, 698, 395, 312, 0, 319, 313, 314,
	298, 315, 318, 699, 316, 317, 668, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 398,
	700, 701, 0, 0, 329, 330, 669, 670, 641, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 661,
	339, 0, 403, 340, 341, 342, 404, 702, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 1545, 348,
	615, 0, 646, 635, 636, 633, 634, 625, 0, 0,
	613, 0, 0, 0, 0, 611, 612, 0, 185, 186,
	0, 187, 0, 0, 621, 0, 663, 628, 0, 0,
	624, 188, 189, 190, 350, 678, 352, 679, 191, 680,
	681, 0, 192, 356, 357, 193, 194, 631, 662, 682,
	683, 360, 0, 195, 674, 0, 654, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 708, 206, 207, 208, 0, 655, 656, 658,
	0, 657, 659, 209, 210, 413, 211, 684, 212, 685,
	686, 0, 213, 0, 214, 0, 215, 0, 0, 677,
	217, 0, 218, 0, 0, 0, 619, 219, 221, 220,
	222, 664, 665, 642, 709, 0, 0, 0, 0, 0,
	223, 224, 687, 688, 689, 0, 225, 0, 226, 0,
	0, 710, 0, 227, 675, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 671, 673, 712, 0, 375,
	235, 0, 232, 0, 711, 233, 690, 234, 691, 692,
	693, 694, 695, 0, 653, 0, 713, 236, 237, 238,
	714, 239, 240, 241, 0, 243, 242, 0, 676, 715,
	244, 245, 716, 0, 246, 247, 0, 0, 248, 0,
	249, 250, 251, 253, 384, 252, 717, 254, 255, 257,
	256, 614, 0, 643, 672, 258, 696, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 387, 718, 264,
	719, 666, 265, 266, 267, 268, 269, 0, 270, 667,
	271, 390, 272, 0, 273, 274, 275, 276, 277, 697,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 720, 293,
	294, 620, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 393, 304, 307, 308, 660, 309, 296, 297,
	310, 721, 311, 698, 395, 312, 0, 319, 313, 314,
	298, 315, 318, 699, 316, 317, 668, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 398,
	700, 701, 0, 0, 329, 330, 669, 670, 641, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 661,
	339, 0, 403, 340, 341, 342, 404, 702, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	615, 0, 646, 635, 636, 633, 634, 625, 0, 0,
	613, 0, 0, 0, 0, 611, 612, 0, 185, 186,
	1407, 187, 1123, 0, 621, 0, 663, 628, 0, 0,
	624, 188, 189, 190, 350, 678, 352, 679, 191, 680,
	681, 0, 192, 356, 357, 193, 194, 631, 662, 682,
	683, 360, 0, 195, 674, 0, 654, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 708, 206, 207, 208, 0, 655, 656, 658,
	0, 657, 659, 209, 210, 413, 211, 684, 212, 685,
	686, 0, 213, 0, 214, 0, 215, 0, 0, 677,
	217, 0, 218, 0, 0, 0, 619, 219, 221, 220,
	222, 664, 665, 642, 709, 0, 0, 0, 0, 0,
	223, 224, 687, 688, 689, 0, 225, 0, 226, 0,
	0, 710, 0, 227, 675, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 671, 673, 712, 0, 375,
	235, 0, 232, 0, 711, 233, 690, 234, 691, 692,
	693, 694, 695, 0, 653, 0, 713, 236, 237, 238,
	714, 239, 240, 241, 0, 243, 242, 0, 676, 715,
	244, 245, 716, 0, 246, 247, 0, 0, 248, 0,
	249, 250, 251, 253, 384, 252, 717, 254, 255, 257,
	256, 614, 0, 643, 672, 258, 696, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 387, 718, 264,
	719, 666, 265, 266, 267, 268, 269, 0, 270, 667,
	271, 390, 272, 0, 273, 274, 275, 276, 277, 697,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 720, 293,
	294, 620, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 393, 304, 307, 308, 660, 309, 296, 297,
	310, 721, 311, 698, 395, 312, 0, 319, 313, 314,
	298, 315, 318, 699, 316, 317, 668, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 398,
	700, 701, 0, 0, 329, 330, 669, 670, 641, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 661,
	339, 0, 403, 340, 341, 342, 404, 702, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	615, 876, 0, 646, 635, 636, 633, 634, 625, 0,
	613, 0, 0, 0, 0, 611, 612, 0, 0, 185,
	186, 0, 187, 0, 621, 0, 0, 663, 628, 0,
	624, 0, 188, 189, 190, 350, 678, 352, 679, 191,
	680, 681, 0, 192, 356, 357, 193, 194, 631, 662,
	682, 683, 360, 0, 195, 674, 0, 654, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 708, 206, 207, 208, 0, 655, 656,
	658, 0, 657, 659, 209, 210, 413, 211, 684, 212,
	685, 686, 0, 213, 0, 214, 0, 215, 0, 0,
	677, 217, 0, 218, 0, 0, 0, 619, 219, 221,
	220, 222, 664, 665, 642, 709, 0, 0, 0, 0,
	0, 223, 224, 687, 688, 689, 0, 225, 0, 226,
	0, 0, 710, 0, 227, 675, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 671, 673, 712, 0,
	375, 235, 0, 232, 0, 711, 233, 690, 234, 691,
	692, 693, 694, 695, 0, 653, 0, 713, 236, 237,
	238, 714, 239, 240, 241, 0, 243, 242, 0, 676,
	715, 244, 245, 716, 0, 246, 247, 0, 0, 248,
	0, 249, 250, 251, 253, 384, 252, 717, 254, 255,
	257, 256, 614, 0, 643, 672, 258, 696, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 387, 718,
	264, 719, 666, 265, 266, 267, 268, 269, 0, 270,
	667, 271, 390, 272, 0, 273, 274, 275, 276, 277,
	697, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 720,
	293, 294, 620, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 393, 304, 307, 308, 660, 309, 296,
	297, 310, 721, 311, 698, 395, 312, 0, 319, 313,
	314, 298, 315, 318, 699, 316, 317, 668, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	398, 700, 701, 0, 0, 329, 330, 669, 670, 641,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	661, 339, 0, 403, 340, 341, 342, 404, 702, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 615, 874, 0, 646, 635, 636, 633, 634, 625,
	0, 613, 0, 0, 0, 0, 611, 612, 0, 0,
	185, 186, 0, 187, 0, 621, 0, 0, 663, 628,
	0, 624, 0, 188, 189, 190, 350, 678, 352, 679,
	191, 680, 681, 0, 192, 356, 357, 193, 194, 631,
	662, 682, 683, 360, 0, 195, 674, 0, 654, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 208, 0, 655,
	656, 658, 0, 657, 659, 209, 210, 413, 211, 684,
	212, 685, 686, 0, 213, 0, 214, 0, 215, 0,
	0, 677, 217, 0, 218, 0, 0, 0, 619, 219,
	221, 220, 222, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 223, 224, 687, 688, 689, 0, 225, 0,
	226, 0, 0, 710, 0, 227, 675, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 671, 673, 712,
	0, 375, 235, 0, 232, 0, 711, 233, 690, 234,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 0,
	676, 715, 244, 245, 716, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 614, 0, 643, 672, 258, 696, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 666, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 620, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 660, 309,
	296, 297, 310, 721, 311, 698, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 699, 316, 317, 668, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 700, 701, 0, 0, 329, 330, 669, 670,
	641, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 661, 339, 0, 403, 340, 341, 342, 404, 702,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 615, 0, 646, 635, 636, 633, 634, 625,
	0, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	185, 186, 0, 187, 0, 0, 621, 0, 663, 628,
	0, 0, 624, 188, 189, 190, 350, 678, 352, 679,
	191, 680, 681, 0, 192, 356, 357, 193, 194, 631,
	662, 682, 683, 360, 0, 195, 674, 0, 654, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 2516, 0, 655,
	656, 658, 0, 657, 659, 209, 210, 413, 211, 684,
	212, 685, 686, 0, 213, 0, 214, 0, 215, 0,
	0, 677, 217, 0, 218, 0, 0, 0, 619, 219,
	221, 220, 222, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 223, 224, 687, 688, 689, 0, 225, 0,
	226, 0, 0, 710, 0, 227, 675, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 671, 673, 712,
	0, 375, 235, 0, 232, 0, 711, 233, 690, 234,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 0,
	676, 715, 244, 245, 716, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 614, 0, 643, 672, 258, 696, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 666, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 620, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 660, 309,
	296, 297, 310, 721, 311, 698, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 699, 316, 317, 668, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 700, 701, 0, 0, 329, 330, 669, 670,
	641, 331, 332, 2515, 334, 0, 0, 335, 336, 337,
	338, 661, 339, 0, 403, 340, 341, 342, 404, 702,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 615, 0, 646, 635, 636, 633, 634, 625,
	0, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	185, 186, 0, 187, 0, 0, 621, 0, 663, 628,
	0, 0, 624, 188, 189, 190, 350, 678, 352, 679,
	191, 680, 681, 0, 192, 356, 357, 193, 194, 631,
	662, 682, 683, 360, 0, 195, 674, 0, 654, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 208, 0, 655,
	656, 658, 0, 657, 659, 209, 210, 413, 211, 684,
	212, 685, 686, 0, 213, 0, 214, 0, 215, 0,
	0, 677, 217, 0, 218, 0, 0, 0, 619, 219,
	221, 220, 222, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 223, 224, 687, 688, 689, 0, 225, 0,
	226, 0, 0, 710, 0, 227, 675, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 671, 673, 712,
	0, 375, 235, 0, 232, 0, 711, 233, 690, 234,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 0,
	676, 715, 244, 245, 716, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 614, 0, 643, 672, 258, 696, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 666, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 620, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 660, 309,
	296, 297, 310, 721, 311, 698, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 699, 316, 317, 668, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 700, 701, 0, 0, 329, 330, 669, 670,
	641, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 661, 339, 0, 403, 340, 341, 342, 404, 702,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 615, 0, 646, 635, 636, 633, 634, 625,
	0, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	185, 186, 0, 187, 0, 0, 621, 0, 663, 628,
	0, 0, 624, 188, 189, 190, 2514, 678, 352, 679,
	191, 680, 681, 0, 192, 356, 357, 193, 194, 631,
	662, 682, 683, 360, 0, 195, 674, 0, 654, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 2516, 0, 655,
	656, 658, 0, 657, 659, 209, 210, 413, 211, 684,
	212, 685, 686, 0, 213, 0, 214, 0, 215, 0,
	0, 677, 217, 0, 218, 0, 0, 0, 619, 219,
	221, 220, 222, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 223, 224, 687, 688, 689, 0, 225, 0,
	226, 0, 0, 710, 0, 227, 675, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 671, 673, 712,
	0, 375, 235, 0, 232, 0, 711, 233, 690, 234,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 0,
	676, 715, 244, 245, 716, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 614, 0, 643, 672, 258, 696, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 666, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 620, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 660, 309,
	296, 297, 310, 721, 311, 698, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 699, 316, 317, 668, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 700, 701, 0, 0, 329, 330, 669, 670,
	641, 331, 332, 2515, 334, 0, 0, 335, 336, 337,
	338, 661, 339, 0, 403, 340, 341, 342, 404, 702,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 615, 0, 646, 635, 636, 633, 634, 625,
	0, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	185, 186, 0, 187, 0, 0, 621, 0, 663, 628,
	0, 0, 624, 188, 189, 190, 350, 678, 352, 679,
	191, 680, 681, 0, 192, 356, 357, 193, 194, 631,
	662, 682, 683, 360, 0, 195, 674, 0, 654, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 208, 0, 655,
	656, 658, 0, 657, 659, 209, 210, 413, 211, 684,
	212, 685, 686, 0, 213, 0, 214, 0, 215, 0,
	0, 677, 217, 0, 218, 0, 0, 0, 619, 219,
	221, 220, 222, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 223, 224, 687, 688, 689, 0, 225, 0,
	226, 0, 0, 710, 0, 227, 675, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 671, 673, 712,
	0, 375, 235, 0, 232, 0, 711, 233, 690, 234,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 0,
	676, 715, 244, 245, 716, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 0, 0, 643, 672, 258, 696, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 666, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 1564, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 660, 309,
	296, 297, 310, 721, 311, 698, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 699, 316, 317, 668, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 700, 701, 0, 0, 329, 330, 669, 670,
	641, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 661, 339, 0, 403, 340, 341, 342, 404, 702,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 646, 635, 636, 633, 634, 625,
	0, 0, 1562, 0, 0, 0, 0, 1560, 1561, 0,
	185, 186, 0, 187, 0, 0, 1563, 0, 663, 628,
	0, 0, 624, 188, 189, 190, 350, 678, 352, 679,
	191, 680, 681, 0, 192, 356, 357, 193, 194, 0,
	662, 682, 683, 360, 0, 195, 674, 0, 654, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 208, 0, 655,
	656, 658, 0, 657, 659, 209, 210, 413, 211, 684,
	212, 685, 686, 0, 213, 0, 214, 0, 215, 0,
	0, 677, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 223, 224, 687, 688, 689, 0, 225, 0,
	226, 0, 0, 710, 0, 227, 675, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 671, 673, 712,
	0, 375, 235, 0, 232, 0, 711, 233, 690, 234,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 0,
	676, 715, 244, 245, 716, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 0, 0, 643, 672, 258, 696, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 666, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 1564, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 660, 309,
	296, 297, 310, 721, 311, 698, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 699, 316, 317, 668, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 700, 701, 0, 0, 329, 330, 669, 670,
	641, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 661, 339, 0, 403, 340, 341, 342, 404, 702,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 646, 635, 636, 633, 634, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 1563, 0, 663, 628,
	0, 0, 624, 188, 189, 190, 0, 678, 352, 679,
	191, 680, 681, 0, 192, 356, 357, 193, 194, 631,
	662, 682, 683, 360, 0, 195, 674, 0, 654, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 2516, 0, 655,
	656, 658, 0, 657, 659, 209, 210, 413, 211, 684,
	212, 685, 686, 0, 213, 0, 214, 0, 215, 0,
	0, 677, 217, 0, 218, 0, 0, 0, 619, 219,
	221, 220, 222, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 223, 224, 687, 688, 689, 0, 225, 0,
	226, 0, 0, 710, 0, 227, 675, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 671, 673, 0,
	0, 375, 235, 0, 232, 0, 711, 233, 690, 234,
	691, 692, 693, 694, 695, 0, 653, 0, 0, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 0,
	676, 715, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 614, 0, 643, 672, 258, 696, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 666, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 620, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 660, 309,
	296, 297, 310, 0, 311, 698, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 699, 316, 317, 668, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 700, 701, 0, 0, 329, 330, 669, 670,
	641, 331, 332, 2515, 334, 0, 0, 335, 336, 337,
	338, 661, 339, 0, 403, 340, 341, 342, 404, 702,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 611, 612, 0,
	185, 186, 0, 187, 0, 0, 621, 0, 663, 0,
	0, 0, 624, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	662, 358, 359, 360, 0, 195, 674, 0, 654, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 208, 0, 655,
	656, 658, 0, 657, 659, 209, 210, 413, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 664, 665, 0, 709, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 710, 0, 227, 675, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 671, 673, 712,
	0, 375, 235, 0, 232, 0, 711, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 713, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 0,
	676, 715, 244, 245, 716, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 0, 0, 0, 672, 258, 386, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 666, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 391, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 392, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 660, 309,
	296, 297, 310, 721, 311, 394, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 396, 316, 317, 668, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 399, 400, 0, 0, 329, 330, 669, 670,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 661, 339, 0, 403, 340, 341, 342, 404, 405,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 927, 0, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 2147, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 783, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 708, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 413, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 709, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 710, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 712,
	0, 375, 235, 0, 232, 0, 711, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 713, 236,
	237, 238, 714, 239, 240, 241, 0, 243, 242, 0,
	383, 715, 244, 245, 716, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 717, 254,
	255, 257, 256, 0, 0, 0, 385, 258, 386, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	718, 264, 719, 388, 265, 266, 267, 268, 269, 0,
	270, 389, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 391, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	720, 293, 294, 392, 295, 0, 299, 300, 301, 302,
	303, 141, 305, 306, 393, 304, 307, 308, 0, 309,
	296, 297, 310, 721, 311, 394, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 396, 316, 317, 397, 0,
	320, 143, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 399, 400, 0, 0, 329, 330, 401, 402,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 403, 340, 341, 342, 934, 405,
	0, 0, 343, 0, 0, 0, 135, 344, 345, 346,
	347, 348, 597, 136, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 127, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 413, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	383, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 385, 258, 386, 259,
	260, 0, 261, 0, 761, 262, 0, 0, 263, 387,
	0, 264, 0, 388, 265, 266, 267, 268, 269, 0,
	270, 389, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 391, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 392, 295, 0, 299, 300, 301, 302,
	303, 141, 305, 306, 393, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 394, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 396, 316, 317, 397, 0,
	320, 143, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 399, 400, 0, 0, 329, 330, 401, 402,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 403, 340, 341, 342, 934, 405,
	0, 0, 343, 0, 0, 0, 135, 344, 345, 346,
	347, 348, 0, 136, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 755, 0, 1202, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 413, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	383, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 385, 258, 386, 259,
	260, 0, 261, 0, 761, 262, 0, 0, 263, 387,
	0, 264, 0, 388, 265, 266, 267, 268, 269, 0,
	270, 389, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 391, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 392, 295, 0, 299, 300, 301, 302,
	303, 141, 305, 306, 393, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 394, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 396, 316, 317, 397, 0,
	320, 143, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 399, 400, 0, 0, 329, 330, 401, 402,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 403, 340, 341, 342, 934, 405,
	0, 0, 343, 0, 0, 0, 135, 344, 345, 346,
	347, 348, 597, 136, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 755, 0, 1202, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 413, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	383, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 385, 258, 386, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	0, 264, 0, 388, 265, 266, 267, 268, 269, 0,
	270, 389, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 391, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 392, 295, 0, 299, 300, 301, 302,
	303, 141, 305, 306, 393, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 394, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 396, 316, 317, 397, 0,
	320, 143, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 399, 400, 0, 0, 329, 330, 401, 402,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 403, 340, 341, 342, 934, 405,
	0, 0, 343, 0, 0, 0, 135, 344, 345, 346,
	347, 348, 1890, 136, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 127, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 413, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	383, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 385, 258, 386, 259,
	260, 0, 261, 0, 761, 262, 0, 0, 263, 387,
	0, 264, 0, 388, 265, 266, 267, 268, 269, 0,
	270, 389, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 391, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 392, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 394, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 396, 316, 317, 397, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 399, 400, 0, 0, 329, 330, 401, 402,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 403, 340, 341, 342, 404, 405,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 754, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 755, 0, 760, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 413, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	383, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 385, 258, 386, 259,
	260, 0, 261, 0, 761, 262, 0, 0, 263, 387,
	0, 264, 0, 388, 265, 266, 267, 268, 269, 0,
	270, 389, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 391, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 392, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 394, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 396, 316, 317, 397, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 399, 400, 0, 0, 329, 330, 401, 402,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 403, 340, 341, 342, 404, 405,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 755, 0, 760, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 413, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 383,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 250, 251, 253, 384, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 385, 258, 386, 259, 260,
	0, 261, 0, 761, 262, 0, 0, 263, 387, 0,
	264, 0, 388, 265, 266, 267, 268, 269, 0, 270,
	389, 271, 390, 272, 0, 273, 274, 275, 276, 277,
	391, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 392, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 393, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 394, 395, 312, 0, 319, 313,
	314, 298, 315, 318, 396, 316, 317, 397, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	398, 399, 400, 0, 0, 329, 330, 401, 402, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 403, 340, 341, 342, 404, 405, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 755, 0, 760, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 413, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 239, 240, 241, 0, 243, 242, 0, 383, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 250, 251, 253, 384, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 385, 258, 386, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 387, 0, 264,
	0, 388, 265, 266, 267, 268, 269, 0, 270, 389,
	271, 390, 272, 0, 273, 274, 275, 276, 277, 391,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 392, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 393, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 394, 395, 312, 0, 319, 313, 314,
	298, 315, 318, 396, 316, 317, 397, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 398,
	399, 400, 0, 0, 329, 330, 401, 402, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 403, 340, 341, 342, 404, 405, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 1235, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 413, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 239,
	240, 241, 0, 243, 242, 0, 383, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 250,
	251, 253, 384, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 385, 258, 386, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 387, 0, 264, 0, 388,
	265, 266, 267, 268, 269, 0, 270, 389, 271, 390,
	272, 0, 273, 274, 275, 276, 277, 391, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 392,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	393, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 394, 395, 312, 0, 319, 313, 314, 298, 315,
	318, 396, 316, 317, 397, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 398, 399, 400,
	0, 0, 329, 330, 401, 402, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	403, 340, 341, 342, 404, 405, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 1706, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 413, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 383, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 250, 251,
	253, 384, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 385, 258, 386, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 387, 0, 264, 0, 388, 265,
	266, 267, 268, 269, 0, 270, 389, 271, 390, 272,
	0, 273, 274, 275, 276, 277, 391, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 392, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 393,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	394, 395, 312, 0, 319, 313, 314, 298, 315, 318,
	396, 316, 317, 397, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 398, 399, 400, 0,
	0, 329, 330, 401, 402, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 403,
	340, 341, 342, 404, 405, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 2063, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 413, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 239, 240, 241,
	0, 243, 242, 0, 383, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 250, 251, 253,
	384, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	385, 258, 386, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 387, 0, 264, 0, 388, 265, 266,
	267, 268, 269, 0, 270, 389, 271, 390, 272, 0,
	273, 274, 275, 276, 277, 391, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 392, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 393, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 394,
	395, 312, 0, 319, 313, 314, 298, 315, 318, 396,
	316, 317, 397, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 398, 399, 400, 0, 0,
	329, 330, 401, 402, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 403, 340,
	341, 342, 404, 405, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 646, 635, 636,
	633, 634, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	1205, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	678, 352, 679, 191, 680, 681, 0, 192, 356, 357,
	193, 194, 0, 0, 682, 683, 360, 0, 195, 361,
	0, 783, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 708, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	413, 211, 684, 212, 685, 686, 0, 213, 0, 214,
	0, 215, 0, 0, 677, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 642, 709,
	0, 0, 0, 0, 0, 223, 224, 687, 688, 689,
	0, 225, 0, 226, 0, 0, 710, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 712, 0, 375, 235, 0, 232, 0, 711,
	233, 690, 234, 691, 692, 693, 694, 695, 0, 653,
	0, 713, 236, 237, 238, 714, 239, 240, 241, 0,
	243, 242, 0, 383, 715, 244, 245, 716, 0, 246,
	247, 0, 0, 248, 0, 249, 250, 251, 253, 384,
	252, 717, 254, 255, 257, 256, 0, 0, 643, 385,
	258, 696, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 387, 718, 264, 719, 388, 265, 266, 267,
	268, 269, 0, 270, 389, 271, 390, 272, 0, 273,
	274, 275, 276, 277, 697, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 720, 293, 294, 392, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 393, 304, 307,
	308, 0, 309, 296, 297, 310, 721, 311, 698, 395,
	312, 0, 319, 313, 314, 298, 315, 318, 699, 316,
	317, 397, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 398, 700, 701, 0, 0, 329,
	330, 401, 402, 641, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 403, 340, 341,
	342, 404, 702, 0, 500, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 178,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 239, 240, 241, 0, 243,
	242, 0, 383, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 250, 251, 253, 384, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 385, 258,
	386, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 387, 0, 264, 0, 388, 265, 266, 267, 268,
	269, 0, 270, 389, 271, 390, 272, 0, 273, 274,
	275, 276, 277, 391, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 392, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 393, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 394, 395, 312,
	0, 319, 313, 314, 298, 315, 318, 396, 316, 317,
	397, 0, 320, 177, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 398, 399, 400, 0, 0, 329, 330,
	401, 402, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 403, 340, 341, 342,
	404, 405, 0, 175, 343, 182, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 181, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 178, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 383, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 385, 258, 386,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 0, 264, 0, 388, 265, 266, 267, 268, 269,
	0, 270, 389, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 391, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 392, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 394, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 396, 316, 317, 397,
	0, 320, 177, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 399, 400, 0, 0, 329, 330, 401,
	402, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 403, 340, 341, 342, 404,
	405, 0, 182, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	181, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 178, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 239, 240, 241, 0, 243, 242, 0, 383, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 250, 251, 253, 384, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 385, 258, 386, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 387, 0, 264,
	0, 388, 265, 266, 267, 268, 269, 0, 270, 389,
	271, 390, 272, 0, 273, 274, 275, 276, 277, 391,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 392, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 393, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 394, 395, 312, 0, 319, 313, 314,
	298, 315, 318, 396, 316, 317, 397, 0, 320, 177,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 398,
	399, 400, 0, 0, 329, 330, 401, 402, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 403, 340, 341, 342, 404, 405, 0, 182,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 181, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 413, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 383, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 250, 251,
	253, 384, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 385, 258, 386, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 387, 0, 264, 0, 388, 265,
	266, 267, 268, 269, 0, 270, 389, 271, 390, 272,
	0, 273, 274, 275, 276, 277, 391, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 392, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 393,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	394, 395, 312, 0, 319, 313, 314, 298, 315, 318,
	396, 316, 317, 397, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 398, 399, 400, 0,
	0, 329, 330, 401, 402, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 403,
	340, 341, 342, 404, 405, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 984, 0, 930,
	988, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 783, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 708,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 413, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 709, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 710, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 712, 0, 375, 235, 0, 232,
	0, 711, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 713, 236, 237, 238, 714, 239, 240,
	241, 0, 243, 242, 0, 383, 715, 244, 245, 716,
	0, 246, 247, 0, 0, 248, 0, 249, 250, 251,
	253, 384, 252, 717, 254, 255, 257, 256, 0, 0,
	0, 385, 258, 386, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 387, 718, 264, 719, 388, 265,
	266, 267, 268, 269, 0, 270, 389, 271, 390, 272,
	0, 273, 274, 275, 276, 277, 391, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 720, 293, 294, 392, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 393,
	304, 307, 308, 0, 309, 296, 297, 310, 721, 311,
	394, 395, 312, 0, 319, 313, 314, 298, 315, 318,
	396, 316, 317, 397, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 398, 399, 400, 0,
	0, 329, 330, 401, 402, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 403,
	340, 341, 342, 404, 405, 930, 988, 343, 0, 0,
	986, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 783,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 708, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 413, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 709, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 710, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	712, 0, 375, 235, 0, 232, 0, 711, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 713,
	236, 237, 238, 714, 239, 240, 241, 0, 243, 242,
	0, 383, 715, 244, 245, 716, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 717,
	254, 255, 257, 256, 0, 0, 0, 385, 258, 386,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 718, 264, 719, 388, 265, 266, 267, 268, 269,
	0, 270, 389, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 391, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 720, 293, 294, 392, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 0,
	309, 296, 297, 310, 721, 311, 394, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 396, 316, 317, 397,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 399, 400, 0, 0, 329, 330, 401,
	402, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 403, 340, 341, 342, 404,
	405, 930, 988, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 783, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 708, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 413, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 709, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	710, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 712, 0, 375, 235,
	0, 232, 0, 711, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 713, 236, 237, 238, 714,
	239, 240, 241, 0, 243, 242, 0, 383, 715, 244,
	245, 716, 0, 246, 247, 0, 0, 248, 0, 249,
	250, 251, 253, 384, 252, 717, 254, 255, 257, 256,
	0, 0, 0, 385, 258, 386, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 387, 718, 264, 719,
	388, 265, 266, 267, 268, 269, 0, 270, 389, 271,
	390, 272, 0, 273, 274, 275, 276, 277, 391, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 720, 293, 294,
	392, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 393, 304, 307, 308, 0, 309, 296, 297, 310,
	721, 311, 394, 395, 312, 0, 319, 313, 314, 298,
	315, 318, 396, 316, 317, 397, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 398, 399,
	400, 0, 0, 329, 330, 401, 402, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 403, 340, 341, 342, 404, 405, 930, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 783, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 708, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	413, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 709,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 710, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 712, 0, 375, 235, 0, 232, 0, 711,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 713, 236, 237, 238, 714, 239, 240, 241, 0,
	243, 242, 0, 383, 715, 244, 245, 716, 0, 246,
	247, 0, 0, 248, 0, 249, 250, 251, 253, 384,
	252, 717, 254, 255, 257, 256, 0, 0, 0, 385,
	258, 386, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 387, 718, 264, 719, 388, 265, 266, 267,
	268, 269, 0, 270, 389, 271, 390, 272, 0, 273,
	274, 275, 276, 277, 391, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 720, 293, 294, 392, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 393, 304, 307,
	308, 0, 309, 296, 297, 310, 721, 311, 394, 395,
	312, 0, 319, 313, 314, 298, 315, 318, 396, 316,
	317, 397, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 398, 399, 400, 0, 0, 329,
	330, 401, 402, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 403, 340, 341,
	342, 404, 405, 182, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 1640, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 1638, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 413, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 1682, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	1643, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 1680, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 383,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 250, 251, 253, 384, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 385, 258, 386, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 387, 0,
	264, 0, 388, 265, 266, 267, 268, 269, 0, 270,
	389, 271, 390, 272, 1642, 273, 274, 275, 276, 277,
	391, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 392, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 393, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 394, 395, 312, 0, 319, 313,
	314, 298, 315, 318, 396, 316, 317, 397, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	398, 399, 400, 0, 0, 329, 330, 401, 402, 0,
	331, 332, 333, 334, 0, 1681, 335, 336, 337, 338,
	0, 339, 0, 403, 340, 341, 342, 404, 405, 182,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 1640,
	195, 361, 0, 0, 1635, 196, 197, 198, 0, 200,
	201, 202, 199, 1638, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 413, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 1643, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 1634, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 383, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 250, 251,
	253, 384, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 385, 258, 386, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 387, 0, 264, 0, 388, 265,
	266, 267, 268, 269, 0, 270, 389, 271, 390, 272,
	1642, 273, 274, 275, 276, 277, 391, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 392, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 393,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	394, 395, 312, 0, 319, 313, 314, 298, 315, 318,
	396, 316, 317, 397, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 398, 399, 400, 0,
	0, 329, 330, 401, 402, 0, 331, 332, 333, 334,
	0, 1641, 335, 336, 337, 338, 0, 339, 0, 403,
	340, 341, 342, 404, 405, 0, 905, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 413, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 239, 240, 241,
	0, 243, 242, 0, 383, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 250, 251, 253,
	384, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	385, 258, 386, 259, 260, 0, 261, 0, 761, 262,
	0, 0, 263, 387, 0, 264, 0, 388, 265, 266,
	267, 268, 269, 0, 270, 389, 271, 390, 272, 0,
	273, 274, 275, 276, 277, 391, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 392, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 393, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 394,
	395, 312, 0, 319, 313, 314, 298, 315, 318, 396,
	316, 317, 397, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 398, 399, 400, 0, 0,
	329, 330, 401, 402, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 403, 340,
	341, 342, 404, 405, 0, 767, 343, 182, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	413, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	769, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 239, 240, 241, 0,
	243, 242, 0, 383, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 250, 251, 253, 384,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 385,
	258, 386, 259, 260, 0, 261, 0, 761, 262, 0,
	0, 263, 387, 0, 264, 0, 388, 265, 266, 267,
	268, 269, 0, 270, 389, 271, 390, 272, 0, 273,
	274, 275, 276, 277, 391, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 392, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 393, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 394, 395,
	312, 0, 319, 313, 314, 298, 315, 318, 396, 316,
	317, 397, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 398, 399, 400, 0, 0, 329,
	330, 401, 402, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 403, 340, 341,
	342, 404, 405, 0, 763, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 413,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 765,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 239, 240, 241, 0, 243,
	242, 0, 383, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 250, 251, 253, 384, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 385, 258,
	386, 259, 260, 0, 261, 0, 761, 262, 0, 0,
	263, 387, 0, 264, 0, 388, 265, 266, 267, 268,
	269, 0, 270, 389, 271, 390, 272, 0, 273, 274,
	275, 276, 277, 391, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 392, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 393, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 394, 395, 312,
	0, 319, 313, 314, 298, 315, 318, 396, 316, 317,
	397, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 398, 399, 400, 0, 0, 329, 330,
	401, 402, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 403, 340, 341, 342,
	404, 405, 0, 431, 343, 182, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 430, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 413, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 383, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 385, 258, 386,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 0, 264, 0, 388, 265, 266, 267, 268, 269,
	0, 270, 389, 271, 390, 429, 0, 273, 274, 275,
	276, 277, 391, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 392, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 394, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 396, 316, 317, 397,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 399, 400, 0, 0, 329, 330, 401,
	402, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 403, 340, 341, 342, 404,
	405, 182, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 1623, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 413, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	239, 240, 241, 0, 243, 242, 0, 383, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	250, 251, 253, 384, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 385, 258, 386, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 387, 0, 264, 0,
	388, 265, 266, 267, 268, 269, 0, 270, 389, 271,
	390, 272, 0, 273, 274, 275, 276, 277, 391, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	392, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 393, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 394, 395, 312, 0, 319, 313, 314, 298,
	315, 318, 396, 316, 317, 397, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 398, 399,
	400, 0, 0, 329, 330, 401, 402, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 403, 340, 341, 342, 404, 405, 182, 2213, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	413, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 239, 240, 241, 0,
	243, 242, 0, 383, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 250, 251, 253, 384,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 385,
	258, 386, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 387, 0, 264, 0, 388, 265, 266, 267,
	268, 269, 0, 270, 389, 271, 390, 272, 0, 273,
	274, 275, 276, 277, 391, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 392, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 393, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 394, 395,
	312, 0, 319, 313, 314, 298, 315, 318, 396, 316,
	317, 397, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 398, 399, 400, 0, 0, 329,
	330, 401, 402, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 403, 340, 341,
	342, 404, 405, 182, 2213, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 413, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 383,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 250, 251, 253, 384, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 385, 258, 386, 259, 260,
	0, 261, 0, 0, 2210, 0, 0, 263, 387, 0,
	264, 0, 388, 265, 266, 267, 268, 269, 0, 270,
	389, 271, 390, 272, 0, 273, 274, 275, 276, 277,
	391, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 392, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 393, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 394, 395, 312, 0, 319, 313,
	314, 298, 315, 318, 396, 316, 317, 397, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	398, 399, 400, 0, 0, 329, 330, 401, 402, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 403, 340, 341, 342, 404, 405, 182,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 413, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 383, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 250, 251,
	253, 384, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 385, 258, 386, 259, 260, 0, 261, 0, 761,
	262, 0, 0, 263, 387, 0, 264, 0, 388, 265,
	266, 267, 268, 269, 0, 270, 389, 271, 390, 272,
	0, 273, 274, 275, 276, 277, 391, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 392, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 393,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	394, 395, 312, 0, 319, 313, 314, 298, 315, 318,
	396, 316, 317, 397, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 398, 399, 400, 0,
	0, 329, 330, 401, 402, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 403,
	340, 341, 342, 404, 405, 0, 1392, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 413, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 239, 240, 241,
	0, 243, 242, 0, 383, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 250, 251, 253,
	384, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	385, 258, 386, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 387, 0, 264, 0, 388, 265, 266,
	267, 268, 269, 0, 270, 389, 271, 390, 272, 0,
	273, 274, 275, 276, 277, 391, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 392, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 393, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 394,
	395, 312, 0, 319, 313, 314, 298, 315, 318, 396,
	316, 317, 397, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 398, 399, 400, 0, 0,
	329, 330, 401, 402, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 403, 340,
	341, 342, 404, 405, 0, 1390, 343, 182, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	413, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 239, 240, 241, 0,
	243, 242, 0, 383, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 250, 251, 253, 384,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 385,
	258, 386, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 387, 0, 264, 0, 388, 265, 266, 267,
	268, 269, 0, 270, 389, 271, 390, 272, 0, 273,
	274, 275, 276, 277, 391, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 392, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 393, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 394, 395,
	312, 0, 319, 313, 314, 298, 315, 318, 396, 316,
	317, 397, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 398, 399, 400, 0, 0, 329,
	330, 401, 402, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 403, 340, 341,
	342, 404, 405, 182, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 185,
	186, 1372, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 413, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 383,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 250, 251, 253, 384, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 385, 258, 386, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 387, 0,
	264, 0, 388, 265, 266, 267, 268, 269, 0, 270,
	389, 271, 390, 272, 0, 273, 274, 275, 276, 277,
	391, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 392, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 393, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 394, 395, 312, 0, 319, 313,
	314, 298, 315, 318, 396, 316, 317, 397, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	398, 399, 400, 0, 0, 329, 330, 401, 402, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 403, 340, 341, 342, 404, 405, 0,
	526, 343, 182, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 963, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 413, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 239, 240, 241, 0, 243, 242, 0, 383, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 250, 251, 253, 384, 528, 0, 254, 255, 257,
	256, 0, 0, 0, 385, 258, 386, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 387, 0, 264,
	0, 388, 265, 266, 267, 268, 269, 0, 270, 389,
	271, 390, 272, 0, 273, 274, 275, 276, 277, 391,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 392, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 393, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 394, 395, 312, 0, 319, 313, 314,
	298, 315, 318, 396, 316, 317, 397, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 523,
	399, 400, 0, 0, 329, 330, 401, 402, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 403, 340, 341, 342, 404, 405, 0, 1250,
	343, 182, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 413, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 1249, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	239, 240, 241, 0, 243, 242, 0, 383, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	250, 251, 253, 384, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 385, 258, 386, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 387, 0, 264, 0,
	388, 265, 266, 267, 268, 269, 0, 270, 389, 271,
	390, 272, 0, 273, 274, 275, 276, 277, 391, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	392, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 393, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 394, 395, 312, 0, 319, 313, 314, 298,
	315, 318, 396, 316, 317, 397, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 398, 399,
	400, 0, 0, 329, 330, 401, 402, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 403, 340, 341, 342, 404, 405, 0, 526, 343,
	182, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 963,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 413, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 239,
	240, 241, 0, 243, 242, 0, 383, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 250,
	251, 253, 384, 528, 0, 254, 255, 257, 256, 0,
	0, 0, 385, 258, 386, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 387, 0, 264, 0, 388,
	265, 266, 267, 268, 269, 0, 270, 389, 271, 390,
	272, 0, 273, 274, 275, 276, 277, 391, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 392,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	393, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 394, 395, 312, 0, 319, 313, 314, 298, 315,
	318, 396, 316, 317, 397, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 523, 399, 400,
	0, 0, 329, 964, 401, 402, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	403, 340, 341, 342, 404, 405, 0, 526, 343, 182,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	517, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 413, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 383, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 250, 251,
	253, 384, 528, 0, 254, 255, 257, 256, 0, 0,
	0, 385, 258, 386, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 387, 0, 264, 0, 388, 265,
	266, 267, 268, 269, 0, 270, 389, 271, 390, 272,
	0, 273, 274, 275, 276, 277, 391, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 392, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 393,
	304, 947, 308, 0, 309, 296, 297, 310, 0, 311,
	394, 395, 312, 0, 319, 313, 314, 298, 315, 318,
	396, 316, 317, 397, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 523, 399, 400, 0,
	0, 329, 330, 401, 402, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 403,
	340, 341, 342, 404, 405, 0, 923, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 413, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 922, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 239, 240, 241,
	0, 243, 242, 0, 383, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 250, 251, 253,
	384, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	385, 258, 386, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 387, 0, 264, 0, 388, 265, 266,
	267, 268, 269, 0, 270, 389, 271, 390, 272, 0,
	273, 274, 275, 276, 277, 391, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 392, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 393, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 394,
	395, 312, 0, 319, 313, 314, 298, 315, 318, 396,
	316, 317, 397, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 398, 399, 400, 0, 0,
	329, 330, 401, 402, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 403, 340,
	341, 342, 404, 405, 0, 920, 343, 182, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	413, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	919, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 239, 240, 241, 0,
	243, 242, 0, 383, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 250, 251, 253, 384,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 385,
	258, 386, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 387, 0, 264, 0, 388, 265, 266, 267,
	268, 269, 0, 270, 389, 271, 390, 272, 0, 273,
	274, 275, 276, 277, 391, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 392, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 393, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 394, 395,
	312, 0, 319, 313, 314, 298, 315, 318, 396, 316,
	317, 397, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 398, 399, 400, 0, 0, 329,
	330, 401, 402, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 403, 340, 341,
	342, 404, 405, 0, 916, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 413,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 915,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 239, 240, 241, 0, 243,
	242, 0, 383, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 250, 251, 253, 384, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 385, 258,
	386, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 387, 0, 264, 0, 388, 265, 266, 267, 268,
	269, 0, 270, 389, 271, 390, 272, 0, 273, 274,
	275, 276, 277, 391, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 392, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 393, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 394, 395, 312,
	0, 319, 313, 314, 298, 315, 318, 396, 316, 317,
	397, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 398, 399, 400, 0, 0, 329, 330,
	401, 402, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 403, 340, 341, 342,
	404, 405, 0, 913, 343, 182, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 413, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 912, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 383, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 385, 258, 386,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 0, 264, 0, 388, 265, 266, 267, 268, 269,
	0, 270, 389, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 391, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 392, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 394, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 396, 316, 317, 397,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 399, 400, 0, 0, 329, 330, 401,
	402, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 403, 340, 341, 342, 404,
	405, 0, 909, 343, 182, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 413, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 908, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	383, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 385, 258, 386, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	0, 264, 0, 388, 265, 266, 267, 268, 269, 0,
	270, 389, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 391, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 392, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 394, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 396, 316, 317, 397, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 399, 400, 0, 0, 329, 330, 401, 402,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 403, 340, 341, 342, 404, 405,
	182, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 185, 186, 897, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 413, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 239,
	240, 241, 0, 243, 242, 0, 383, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 250,
	251, 253, 384, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 385, 258, 386, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 387, 0, 264, 0, 388,
	265, 266, 267, 268, 269, 0, 270, 389, 271, 390,
	272, 0, 273, 274, 275, 276, 277, 391, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 392,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	393, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 394, 395, 312, 0, 319, 313, 314, 298, 315,
	318, 396, 316, 317, 397, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 398, 399, 400,
	0, 0, 329, 330, 401, 402, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	403, 340, 341, 342, 404, 405, 0, 895, 343, 182,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 413, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 894, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 383, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 250, 251,
	253, 384, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 385, 258, 386, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 387, 0, 264, 0, 388, 265,
	266, 267, 268, 269, 0, 270, 389, 271, 390, 272,
	0, 273, 274, 275, 276, 277, 391, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 392, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 393,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	394, 395, 312, 0, 319, 313, 314, 298, 315, 318,
	396, 316, 317, 397, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 398, 399, 400, 0,
	0, 329, 330, 401, 402, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 403,
	340, 341, 342, 404, 405, 0, 891, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 413, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 239, 240, 241,
	0, 243, 242, 0, 383, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 250, 251, 253,
	384, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	385, 258, 386, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 387, 0, 264, 0, 388, 265, 266,
	267, 268, 269, 0, 270, 389, 271, 390, 272, 0,
	273, 274, 275, 276, 277, 391, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 392, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 393, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 394,
	395, 312, 0, 319, 313, 314, 298, 315, 318, 396,
	316, 317, 397, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 398, 399, 400, 0, 0,
	329, 330, 401, 402, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 403, 340,
	341, 342, 404, 405, 0, 889, 343, 182, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	413, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 239, 240, 241, 0,
	243, 242, 0, 383, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 250, 251, 253, 384,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 385,
	258, 386, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 387, 0, 264, 0, 388, 265, 266, 267,
	268, 269, 0, 270, 389, 271, 390, 272, 0, 273,
	274, 275, 276, 277, 391, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 392, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 393, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 394, 395,
	312, 0, 319, 313, 314, 298, 315, 318, 396, 316,
	317, 397, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 398, 399, 400, 0, 0, 329,
	330, 401, 402, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 403, 340, 341,
	342, 404, 405, 0, 883, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 413,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 885,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 239, 240, 241, 0, 243,
	242, 0, 383, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 250, 251, 253, 384, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 385, 258,
	386, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 387, 0, 264, 0, 388, 265, 266, 267, 268,
	269, 0, 270, 389, 271, 390, 272, 0, 273, 274,
	275, 276, 277, 391, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 392, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 393, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 394, 395, 312,
	0, 319, 313, 314, 298, 315, 318, 396, 316, 317,
	397, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 398, 399, 400, 0, 0, 329, 330,
	401, 402, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 403, 340, 341, 342,
	404, 405, 0, 773, 343, 182, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 413, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 775, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 383, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 385, 258, 386,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 0, 264, 0, 388, 265, 266, 267, 268, 269,
	0, 270, 389, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 391, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 392, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 394, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 396, 316, 317, 397,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 399, 400, 0, 0, 329, 330, 401,
	402, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 403, 340, 341, 342, 404,
	405, 0, 771, 343, 182, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 413, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	383, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 250, 251, 253, 384, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 385, 258, 386, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 387,
	0, 264, 0, 388, 265, 266, 267, 268, 269, 0,
	270, 389, 271, 390, 272, 0, 273, 274, 275, 276,
	277, 391, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 392, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 393, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 394, 395, 312, 0, 319,
	313, 314, 298, 315, 318, 396, 316, 317, 397, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 398, 399, 400, 0, 0, 329, 330, 401, 402,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 403, 340, 341, 342, 404, 405,
	0, 526, 343, 182, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 517, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 413, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 383,
	0, 244, 245, 0, 0, 246, 516, 0, 0, 248,
	0, 249, 250, 251, 253, 384, 528, 0, 254, 255,
	257, 256, 0, 0, 0, 385, 258, 386, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 387, 0,
	264, 0, 388, 265, 266, 267, 268, 269, 0, 270,
	389, 271, 390, 272, 0, 273, 274, 275, 276, 277,
	391, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 518, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 393, 304, 519, 308, 0, 309, 296,
	297, 310, 0, 311, 394, 395, 312, 0, 319, 313,
	314, 298, 315, 318, 396, 316, 317, 397, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	523, 399, 400, 0, 0, 329, 521, 401, 402, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 403, 340, 341, 342, 404, 405, 0,
	508, 343, 182, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 413, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 239, 240, 241, 0, 243, 242, 0, 383, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 250, 251, 253, 384, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 385, 258, 386, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 387, 0, 264,
	0, 388, 265, 266, 267, 268, 269, 0, 270, 389,
	271, 390, 272, 0, 273, 274, 275, 276, 277, 391,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 392, 295, 0, 509, 300, 301, 302, 303, 0,
	305, 306, 393, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 394, 395, 312, 0, 319, 313, 314,
	298, 315, 318, 396, 316, 317, 397, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 398,
	399, 400, 0, 0, 329, 330, 401, 402, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 403, 340, 341, 342, 404, 405, 0, 506,
	343, 182, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 413, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	239, 240, 241, 0, 243, 242, 0, 383, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	250, 251, 253, 384, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 385, 258, 386, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 387, 0, 264, 0,
	388, 265, 266, 267, 268, 269, 0, 270, 389, 271,
	390, 272, 0, 273, 274, 275, 276, 277, 391, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	392, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 393, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 394, 395, 312, 0, 319, 313, 314, 298,
	315, 318, 396, 316, 317, 397, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 398, 399,
	400, 0, 0, 329, 330, 401, 402, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 403, 340, 341, 342, 404, 405, 0, 498, 343,
	182, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 413, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 239,
	240, 241, 0, 243, 242, 0, 383, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 250,
	251, 253, 384, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 385, 258, 386, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 387, 0, 264, 0, 388,
	265, 266, 267, 268, 269, 0, 270, 389, 271, 390,
	272, 0, 273, 274, 275, 276, 277, 391, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 392,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	393, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 394, 395, 312, 0, 319, 313, 314, 298, 315,
	318, 396, 316, 317, 397, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 398, 399, 400,
	0, 0, 329, 330, 401, 402, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	403, 340, 341, 342, 404, 405, 0, 454, 343, 182,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 413, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 383, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 250, 251,
	253, 384, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 385, 258, 386, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 387, 0, 264, 0, 388, 265,
	266, 267, 268, 269, 0, 270, 389, 271, 390, 272,
	0, 273, 274, 275, 276, 277, 391, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 392, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 393,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	394, 395, 312, 0, 319, 313, 314, 298, 315, 318,
	396, 316, 317, 397, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 398, 399, 400, 0,
	0, 329, 330, 401, 402, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 403,
	340, 341, 342, 404, 405, 182, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 413, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 383, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 385, 258, 386,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 0, 264, 0, 388, 265, 266, 267, 268, 269,
	0, 270, 389, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 391, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 392, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 394, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 396, 316, 317, 397,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 399, 400, 0, 0, 329, 330, 401,
	402, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 403, 340, 341, 342, 404,
	405, 182, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 413, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 1937, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	239, 240, 241, 0, 243, 242, 0, 383, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	250, 251, 253, 384, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 385, 258, 386, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 387, 0, 264, 0,
	388, 265, 266, 267, 268, 269, 0, 270, 389, 271,
	390, 272, 0, 273, 274, 275, 276, 277, 391, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	392, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 393, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 394, 395, 312, 0, 319, 313, 314, 298,
	315, 318, 396, 316, 317, 397, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 398, 399,
	400, 0, 0, 329, 330, 401, 402, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 403, 340, 341, 342, 404, 405, 182, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	413, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	1935, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 239, 240, 241, 0,
	243, 242, 0, 383, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 250, 251, 253, 384,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 385,
	258, 386, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 387, 0, 264, 0, 388, 265, 266, 267,
	268, 269, 0, 270, 389, 271, 390, 272, 0, 273,
	274, 275, 276, 277, 391, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 392, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 393, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 394, 395,
	312, 0, 319, 313, 314, 298, 315, 318, 396, 316,
	317, 397, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 398, 399, 400, 0, 0, 329,
	330, 401, 402, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 403, 340, 341,
	342, 404, 405, 182, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 413, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 1924, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 383,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 250, 251, 253, 384, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 385, 258, 386, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 387, 0,
	264, 0, 388, 265, 266, 267, 268, 269, 0, 270,
	389, 271, 390, 272, 0, 273, 274, 275, 276, 277,
	391, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 392, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 393, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 394, 395, 312, 0, 319, 313,
	314, 298, 315, 318, 396, 316, 317, 397, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	398, 399, 400, 0, 0, 329, 330, 401, 402, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 403, 340, 341, 342, 404, 405, 182,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 413, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 383, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 250, 251,
	253, 384, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 385, 258, 386, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 387, 0, 264, 0, 388, 265,
	266, 267, 268, 269, 0, 270, 389, 271, 390, 272,
	0, 273, 274, 275, 276, 277, 391, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 392, 295,
	0, 509, 300, 301, 302, 303, 0, 305, 306, 393,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	394, 395, 312, 0, 319, 313, 314, 298, 315, 318,
	396, 316, 317, 397, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 398, 399, 400, 0,
	0, 329, 330, 401, 402, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 403,
	340, 341, 342, 404, 405, 182, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 1260, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 413, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 383, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 250, 251, 253, 384, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 385, 258, 386,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	387, 0, 264, 0, 388, 265, 266, 267, 268, 269,
	0, 270, 389, 271, 390, 272, 0, 273, 274, 275,
	276, 277, 391, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 392, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 393, 304, 307, 308, 0,
	0, 296, 297, 310, 0, 311, 394, 395, 312, 0,
	319, 313, 314, 298, 315, 318, 396, 316, 317, 397,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 398, 399, 400, 0, 0, 329, 330, 401,
	402, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 403, 340, 341, 342, 404,
	405, 182, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 413, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 887, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	239, 240, 241, 0, 243, 242, 0, 383, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	250, 251, 253, 384, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 385, 258, 386, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 387, 0, 264, 0,
	388, 265, 266, 267, 268, 269, 0, 270, 389, 271,
	390, 272, 0, 273, 274, 275, 276, 277, 391, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	392, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 393, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 394, 395, 312, 0, 319, 313, 314, 298,
	315, 318, 396, 316, 317, 397, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 398, 399,
	400, 0, 0, 329, 330, 401, 402, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 403, 340, 341, 342, 404, 405, 182, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	413, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 239, 240, 241, 0,
	243, 242, 0, 383, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 250, 251, 253, 384,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 385,
	258, 386, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 387, 0, 264, 0, 388, 265, 266, 267,
	268, 269, 0, 270, 389, 271, 390, 272, 0, 273,
	274, 275, 276, 277, 391, 737, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 392, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 393, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 394, 395,
	312, 0, 319, 313, 314, 298, 315, 318, 396, 316,
	317, 397, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 398, 399, 400, 0, 0, 329,
	330, 401, 402, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 403, 340, 341,
	342, 404, 405, 182, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 413, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 383,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 250, 251, 253, 384, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 385, 258, 386, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 387, 0,
	264, 0, 388, 265, 266, 0, 268, 269, 0, 270,
	389, 271, 390, 272, 0, 273, 274, 275, 0, 277,
	391, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 392, 0, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 393, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 394, 395, 312, 0, 319, 313,
	314, 298, 315, 318, 396, 316, 317, 397, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	398, 399, 400, 0, 0, 329, 330, 401, 402, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 403, 340, 341, 342, 404, 405, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 1057, 0,
	1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 1058, 0,
	0, 0, 0, 1089, 1078, 0, 0, 0, 0, 0,
	1059, 1075, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	1082, 1083, 1084, 0, 0, 0, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 1101, 0, 0, 0, 1081, 1082, 1083, 1084, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 1093, 1101, 0, 0,
	0, 0, 1079, 0, 0, 0, 0, 456, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 40, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 1079, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 40, 0,
	0, 0, 1080, 0, 64, 0, 480, 65, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 44, 0, 0, 0, 0, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	67, 0, 0, 0, 1089, 0, 0, 0, 52, 0,
	0, 1059, 0, 1092, 1100, 0, 1070, 1071, 1077, 1076,
	1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 0, 1058, 0, 63, 0, 0,
	0, 1078, 1873, 0, 64, 0, 480, 65, 1075, 1092,
	0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095,
	0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066,
	0, 0, 0, 0, 0, 0, 0, 0, 1872, 0,
	67, 0, 0, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1082, 1083, 1084,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 128,
	70, 0, 71, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 141, 1093, 1101, 1089,
	0, 0, 0, 0, 479, 0, 1059, 104, 0, 1100,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 0, 0, 0,
	1058, 0, 1091, 68, 0, 0, 1078, 0, 0, 1079,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	70, 0, 71, 142, 1090, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 0, 141, 0, 136, 0,
	0, 0, 0, 0, 479, 0, 0, 104, 0, 0,
	0, 1081, 1082, 1083, 1084, 0, 0, 0, 1085, 0,
	1064, 457, 0, 0, 0, 0, 143, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 1101, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 1091, 136, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 1085, 0, 0, 0, 0, 0, 1824,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 1094, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	1832, 1833, 0, 1850, 1851, 1852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 2035, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0, 0,
	2485, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 0,
	1064, 0, 0, 1847, 0, 0, 0, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	0, 0, 1093, 1101, 1089, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 1091, 0, 0,
	0, 1078, 0, 0, 1079, 0, 0, 1838, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1853, 0,
	0, 0, 0, 0, 0, 0, 1081, 1082, 1083, 1084,
	0, 0, 0, 1085, 0, 1064, 0, 0, 0, 0,
	0, 1848, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 1101, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1849, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 1085, 0,
	2436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	0, 1094, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1100, 1844, 1845, 1846, 0, 0,
	0, 0, 0, 0, 1843, 1841, 1842, 1834, 1835, 1836,
	1837, 1839, 1840, 0, 0, 1058, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 0, 0, 2390, 1081, 1082, 1083, 1084,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 0, 1093, 1101, 1089,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 1091, 0, 0, 0, 1078, 0, 0, 1079,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 1082, 1083, 1084, 0, 0, 0, 1085, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 1101, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 1085, 0, 2360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 1094, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0, 0,
	2355, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	0, 0, 1093, 1101, 1089, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 1091, 0, 0,
	0, 1078, 0, 0, 1079, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1082, 1083, 1084,
	0, 0, 0, 1085, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 1101, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 1085, 0,
	2351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	0, 1094, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 0, 0, 2289, 1081, 1082, 1083, 1084,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 0, 1093, 1101, 1089,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 1091, 0, 0, 0, 1078, 0, 0, 1079,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 1082, 1083, 1084, 0, 0, 0, 1085, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 1101, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 1085, 0, 2255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 1094, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0, 0,
	2254, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	0, 0, 1093, 1101, 1089, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 1091, 0, 0,
	0, 1078, 0, 0, 1079, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1082, 1083, 1084,
	0, 0, 0, 1085, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 1101, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 1085, 0,
	2219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	0, 1094, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 0, 0, 2066, 1081, 1082, 1083, 1084,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 0, 1093, 1101, 1089,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 1091, 0, 0, 0, 1078, 0, 0, 1079,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 1082, 1083, 1084, 0, 0, 0, 1085, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 1101, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 1085, 0, 2042, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 1094, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0, 0,
	1502, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 0, 1091, 0, 1089,
	0, 0, 0, 0, 1079, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	1058, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 1082, 1083, 1084, 0, 1094, 0, 0, 0,
	1064, 2548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 0, 0, 0,
	0, 0, 1093, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 1311, 1300, 1330,
	1291, 1321, 1320, 0, 0, 1293, 1292, 1091, 0, 0,
	0, 1332, 1331, 0, 1079, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 1794, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1326,
	0, 1318, 1317, 0, 0, 2547, 0, 0, 0, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1315, 1313, 1314, 0, 1080, 1056,
	1057, 0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0,
	0, 0, 0, 0, 0, 1089, 1094, 0, 0, 0,
	0, 1299, 1059, 0, 0, 1100, 0, 0, 1304, 1302,
	1305, 1306, 1307, 1308, 1309, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 0, 1295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 0, 1301, 0, 0, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 1081, 1082, 1083,
	1084, 1312, 0, 0, 0, 0, 1064, 0, 1864, 0,
	0, 1863, 0, 0, 1056, 1057, 0, 1086, 1087, 1088,
	1096, 1097, 1098, 0, 0, 0, 0, 0, 1093, 1101,
	1089, 0, 0, 0, 1296, 1767, 0, 1059, 0, 0,
	1100, 0, 0, 0, 0, 1310, 1297, 1099, 0, 0,
	0, 0, 0, 0, 0, 1334, 0, 0, 0, 0,
	0, 1058, 0, 1091, 0, 0, 0, 1078, 1294, 0,
	1079, 0, 1327, 1328, 1075, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1298, 1090, 0, 0, 0, 1333,
	0, 1768, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 1082, 1083, 1084, 0, 0, 0, 1085,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 1101, 0, 0, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073,
	1074, 1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063,
	1065, 1066, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1599, 0, 0, 0, 0, 1080,
	1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098, 0,
	0, 0, 0, 0, 0, 0, 1089, 1094, 0, 0,
	1598, 0, 0, 1059, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 0, 1070,
	1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067,
	1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 1081, 1082,
	1083, 1084, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 1056, 1057, 0, 1086, 1087,
	1088, 1096, 1097, 1098, 0, 0, 0, 0, 0, 1093,
	1101, 1089, 0, 0, 0, 0, 0, 0, 1059, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 0, 1091, 0, 0, 0, 1078, 0,
	0, 1079, 0, 0, 0, 1075, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 1082, 1083, 1084, 0, 0, 0,
	1085, 0, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 1101, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 594, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 0, 1070, 1071, 1077, 1076, 1072,
	1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061, 1062,
	1063, 1065, 1066, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098,
	0, 0, 0, 0, 0, 0, 0, 1089, 1094, 0,
	0, 0, 0, 0, 1059, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069,
	1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 1081,
	1082, 1083, 1084, 0, 0, 0, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 1056, 1057, 0, 1086,
	1087, 1088, 1096, 1097, 1098, 0, 0, 0, 0, 0,
	1093, 1101, 1089, 0, 0, 0, 0, 0, 0, 1059,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 1091, 0, 0, 0, 1078,
	0, 0, 1079, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 1082, 1083, 1084, 0, 0,
	0, 1085, 0, 1064, 0, 0, 0, 0, 1870, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 1101, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1091, 2046, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 1070, 1071, 1077, 1076,
	1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097,
	1098, 0, 0, 0, 0, 0, 0, 0, 1089, 1094,
	0, 0, 1865, 0, 0, 1059, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 0,
	1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 0,
	1081, 1082, 1083, 1084, 0, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 1056, 1057, 0,
	1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0, 0,
	0, 1093, 1101, 1089, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 0, 1091, 0, 0, 0,
	1078, 0, 0, 1079, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 1082, 1083, 1084, 0,
	0, 0, 1085, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 1093, 1101, 0, 0,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 1830, 1070, 1071, 1077,
	1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060,
	1061, 1062, 1063, 1065, 1066, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 0, 0, 0, 1089,
	1094, 0, 0, 1823, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095,
	0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066,
	0, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	0, 0, 1093, 1101, 1089, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 1091, 0, 0,
	0, 1078, 0, 0, 1079, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1082, 1083, 1084,
	0, 0, 0, 1085, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 1101, 0,
	0, 0, 0, 0, 0, 0, 1094, 1056, 1057, 0,
	1086, 1087, 1088, 1096, 1097, 1098, 1099, 0, 0, 0,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	1059, 0, 1091, 1100, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 1090, 0, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 1081, 1082, 1083, 1084, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 1094, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097,
	1098, 0, 0, 0, 0, 0, 1093, 1101, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 1091, 0, 0, 0, 1078, 0, 0, 1079, 0,
	0, 0, 1075, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1082, 1083, 1084, 0, 0, 0, 1085, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 1101, 0, 0, 0, 0, 0, 0, 0,
	1094, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1059, 0, 1091, 1100, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095,
	0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 1081,
	1082, 1083, 1084, 0, 0, 0, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	1303, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 1300, 1330, 1291, 1321, 1320, 0,
	0, 1293, 1292, 0, 0, 1091, 0, 1332, 1331, 0,
	0, 0, 1079, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 0, 1070, 1071, 1077,
	1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060,
	1061, 1062, 1063, 1065, 1066, 1326, 0, 1318, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 547, 0, 573, 0,
	1315, 1313, 1314, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 1299, 550, 0,
	0, 0, 0, 0, 1304, 1302, 1305, 1306, 1307, 1308,
	1309, 0, 1329, 0, 0, 0, 0, 0, 0, 551,
	0, 0, 0, 0, 553, 0, 0, 0, 0, 0,
	0, 0, 559, 560, 0, 0, 0, 569, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 554, 0, 1319, 0, 0, 0, 1301, 0,
	0, 0, 0, 1092, 0, 0, 1070, 1071, 1077, 1076,
	1072, 1073, 1074, 1095, 572, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 0, 0, 0, 1312, 0, 0,
	0, 1427, 1425, 1426, 1429, 1428, 0, 0, 0, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 557, 0,
	1296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1310, 1297, 0, 0, 563, 0, 0, 558, 565,
	0, 1334, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 0, 0, 1294, 0, 0, 0, 1327, 1328,
	0, 575, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 566, 576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 567, 0, 0, 0,
	571, 0, 0, 0, 0, 577, 0, 0, 0, 0,
	564, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 570,
}
var sqlPact = [...]int{

	3799, -1000, -56, -1000, -1000, -1000, 78, -1000, -1000, -1000,
	-1000, 77, 76, 75, -1000, 69, 68, 67, 66, 65,
	64, 62, 60, 59, 58, 55, -1000, 54, -1000, -1000,
	-1000, -1000, 52, 50, 49, 48, 47, 45, 37, -1000,
	912, 21681, 36, 34, 1223, -1000, 35551, 33, 32, 31,
	30, -1000, 1022, 28, 27, 25741, 876, 1347, 24, 19,
	18, 17, 16, 1040, 35215, 38775, 1417, 1041, 1542, 34876,
	21342, 1540, 1403, 34537, -1000, -1000, 34198, 14, 13, 11,
	10, 9, -1000, -1000, 33859, 8, 3, 1, 0, -1,
	-2, -4, -10, -15, -16, -17, -18, -19, -23, -1000,
	-24, -25, -26, -1000, 44334, -27, -28, -29, 1036, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 799, 56, -1000, 908, 318, 1428, 8051,
	995, 989, 976, 960, 971, 37903, 35551, -30, -100, -31,
	-1000, 1856, 493, 18910, 3799, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25402,
	25063, 33520, 33181, 6300, 699, -1000, -59, 22355, 35551, -1000,
	57, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14360,
	14009, 451, 57, -1000, -1000, -1000, -1000, -1000, 32842, -1000,
	37567, 32503, 32164, 1404, 31825, -1000, -1000, -1000, -1000, 31486,
	-1000, -1000, 1752, 1567, 1556, 24724, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31150, 30811,
	30472, 30133, 29794, 412, -1000, -1000, -1000, 17160, -1000, -1000,
	-1000, -1000, -32, -1000, -33, -1000, -34, -36, -37, -38,
	-1000, -39, -42, -1000, -44, -47, -1000, -49, -51, 29455,
	786, 1148, -1000, -1000, -58, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35551, -1000, 15060, -1000, 411, -1000, 1548,
	-1000, 15060, -1000, 1142, -1000, -1000, -1000, -1000, -1000, 35551,
	-1000, -1000, -1000, -1000, -1000, -1000, 2088, 1147, 408, 29116,
	-1000, 1510, -1000, 549, 679, -1000, -1000, -1000, 9101, 88,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1362,
	22705, 1097, 1884, 1716, 2087, 1274, 1703, 1690, 1670, 1624,
	1616, 2086, 871, 2085, 1590, 951, 2082, 1608, 1167, 618,
	2081, 1543, 1535, -1000, -1000, -1000, -1000, 875, -1000, -1000,
	-1000, 27085, -1000, -1000, 739, 861, 908, -1000, -1000, -1000,
	1335, 1858, 1858, 1858, 1910, 201, 197, -1000, 56, -1000,
	1530, -1000, 1140, -1000, -1000, -1000, -1000, -1000, 43658, -1000,
	-1000, 15060, 15060, 15060, 15060, 15060, 975, 431, -1000, 406,
	404, 7350, -1000, -1000, 2069, -1000, -1000, -1000, 227, -1000,
	-1000, 15060, 57, -1000, -1000, -1000, -1000, 396, 2077, -1000,
	576, -1000, -1000, -1000, 557, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1615, 395, 393, 392, -1000, 390,
	-1000, -1000, 387, 384, 381, 378, 377, 376, 375, 374,
	370, 363, 361, 359, 358, 356, 355, 923, -1000, 575,
	-1000, -1000, 575, 575, -1000, 326, 326, 327, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 326, -1000, -1000, -1000,
	533, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 354, 1061, -1000, -1000, 1061, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 696, 36895, -62, 35551, -1000, 335,
	-62, -1000, -1000, 210, -1000, 10151, 10151, -1000, -1000, -1000,
	-1000, -1000, 9451, 1391, -1000, 4167, -207, 226, 456, -1000,
	17860, 20654, -1000, -1000, 1039, 1739, 767, -1000, 899, 1735,
	437, -1000, 1047, -1000, 837, 1734, -178, 1660, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 23041, 22355, -59, -71, -1000,
	-1000, -1000, 5950, 43658, -1000, 43658, -1000, 771, 19608, 57,
	-1000, -1000, -1000, -1000, 333, 1248, -1000, 1243, 562, -1000,
	220, -1000, 28777, 562, 1241, -1000, -1000, -1000, 27085, -1000,
	35551, -1000, 35551, -1000, 812, -1000, 37231, 117, 1730, -1000,
	-1000, 117, 1726, -1000, 110, 1724, -1000, -1000, 1160, 1723,
	-1000, -71, 1715, -1000, -1000, 15060, -79, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 493, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 28438, 22018, 1283,
	496, 43658, 1988, 41890, 23041, 43658, 22018, -1000, -1000, 35551,
	-1000, 15060, -1000, 1987, 1402, -63, -1000, -1000, -1000, -1000,
	-1000, 1305, 1338, 688, 883, 9101, 9101, 1815, -1000, 85,
	6300, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28099,
	-1000, -1000, -1000, 1084, 35551, -1000, -1000, 1597, -1000, 22018,
	35551, -1000, 35551, -1000, 35551, -1000, 35551, -1000, 35551, -1000,
	-1000, -1000, -1000, -1000, 3541, -1000, 1595, -1000, -1000, 35551,
	-1000, 1301, -1000, -1000, -1000, 27763, 27424, -1000, 894, 730,
	-1000, -1000, 118, -1000, 23041, 1877, 547, -1000, 1335, -1000,
	1089, 1368, 13658, 1346, 15060, 56, -1000, -1000, 56, 56,
	8751, -1000, -1000, -1000, 35551, -1000, 44216, 41890, 6300, 708,
	15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060,
	15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060,
	15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060,
	15060, 15060, 1386, 15060, 694, 15060, 15060, 15060, 15060, 929,
	1026, 324, 1085, -1000, 2032, 2032, 2032, 43932, 43932, 317,
	431, -1000, 15060, -1000, 38, 15060, 197, 41333, -60, 7000,
	-1000, -1000, -1000, 13308, 572, 43658, 57, 4810, -1000, 2066,
	828, 1646, 1447, 332, 486, 476, 467, 463, 15060, 15060,
	12958, 12607, 12256, 15760, 11905, 15060, 7700, 15060, 15060, 15060,
	15060, 11554, 11203, -1000, 329, -1000, -1000, -1000, -1000, 2062,
	-1000, -1000, 2061, -1000, 707, 705, 2060, -1000, -63, -1000,
	36895, -1000, 35551, -62, 1983, 35551, -1000, 146, -1000, 42390,
	-1000, 146, -81, -1000, 1358, 1357, 19259, 1394, 980, 980,
	980, -1000, 328, 422, 456, 5231, 10852, -1000, 26077, 1003,
	115, 196, 17510, 1391, -1000, 35551, -75, 1004, -1000, 24385,
	1867, 1863, 1830, 27085, 1927, 38, 1840, 1532, 692, 27085,
	1839, 690, 1926, 38, 1529, 684, 35551, 6300, 1834, 470,
	-1000, 35551, -1000, -1000, -1000, 1524, -82, -1000, -1000, 24049,
	1980, 1713, 1711, -1000, 937, -1000, 1978, 35551, 1141, 1240,
	-1000, -1000, 725, 1685, 567, 218, 1968, 218, 19956, -1000,
	35551, -1000, 35551, -1000, -1000, 35551, -1000, 35551, -1000, 35551,
	35551, -1000, 35551, 35551, -87, 43658, 38855, 23713, 682, -1000,
	594, 24049, 3085, -88, -1000, 754, -1000, -1000, -1000, -1000,
	192, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 327, 923, 326, 326, 326,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 533, -1000, -1000,
	575, 575, 575, -1000, -1000, -80, -1000, 1502, 519, -104,
	633, -63, -1000, 1061, -1000, 831, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2076,
	-1000, 2055, -1000, -1000, 2059, -66, -1000, -66, -1000, 6300,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35551, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 488, -1000, -1000, -1000,
	-1000, -1000, -1000, 35551, 35551, 35551, -1000, 27085, -1000, 1568,
	-1000, 1860, -1000, -1000, -1000, -1000, 43658, -1000, 322, -1000,
	-1000, 43658, 891, 1384, -1000, 1384, -68, -1000, 42134, 1353,
	35551, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 545, 348, 348, 864, 864, 864, 864, 1974,
	1043, 407, 1776, 4437, 4437, 4437, 4437, 4437, 4437, 4437,
	4437, 574, 1611, 1611, 574, 574, 574, 574, 574, 4437,
	4437, 4437, 43932, 43807, 281, 15060, 15060, 680, 1025, 324,
	281, 15060, 281, 281, 281, 281, -1000, 1268, -1000, -1000,
	-1000, -1000, 1501, 323, 15760, 15760, -1000, -1000, -1000, 7350,
	16110, -1000, -1000, -1000, -1000, 321, 15060, -1000, 41593, -231,
	195, -132, -1000, 15060, 421, -118, -1000, 810, -1000, 15060,
	-1000, -48, 15060, 15060, 15060, 190, -1000, 189, -1000, 678,
	-1000, 666, 665, 663, -1000, 320, 977, 304, 303, 15060,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43533, 38898,
	186, -1000, 1487, -132, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 185, -1000, 182, -1000, 43277, -132, 181, 2746, -1000,
	15760, 15760, 15760, 7350, 302, 180, -1000, 42009, -1000, 43152,
	10501, 10501, 10501, 178, 42896, 15060, -132, 38617, 38581, 4283,
	-105, -106, -1000, -111, -1000, 2053, -112, 177, 544, 543,
	175, -1000, -1000, 301, -113, 567, 10151, 18560, 6300, -1000,
	567, 9451, -1000, 19259, 19259, 1273, 1331, 19259, -1000, -1000,
	-1000, -1000, 26077, 452, 456, 26077, -1000, 2050, 1330, 173,
	-1000, -1000, -1000, 35551, 300, -1000, 456, 168, 948, 35551,
	35551, 35551, -1000, -1000, 1239, 36559, 1238, 41890, 35551, -1000,
	299, 294, 1350, 1348, 35551, 35551, 36223, 35887, 35551, 1009,
	38, -1000, 541, 293, 35551, 889, 534, 35551, 38, -1000,
	292, 35551, 886, -1000, 492, 1418, 1178, -1000, 768, 1480,
	35551, 164, -119, -69, 41890, -1000, -1000, -1000, -1000, -1000,
	35551, 334, 35551, 38, 35551, 35551, 2075, 38, 35551, 1682,
	1747, 453, 35551, 1368, 15060, 944, -1000, 18210, 585, 35551,
	873, 128, -1000, -1000, -1000, 508, 35551, -1000, -1000, 117,
	117, -1000, 110, 1160, -71, -1000, 15060, -1000, -1000, 35551,
	23041, -126, -1000, -1000, 41890, -1000, 430, 648, -1000, 2048,
	559, 23041, 35551, 9101, 9101, -1000, 1369, -1000, -1000, 885,
	-1000, 893, -1000, -1000, -1000, -1000, 9101, -1000, -76, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 990, -1000, 891, -1000,
	15060, 2042, -1000, -1000, -1000, 8751, -1000, -1000, -1000, 35551,
	-189, 15060, 281, 281, 15060, 15760, 15760, -1000, 281, -1000,
	-1000, -1000, -1000, -1000, 1471, 289, 15060, 41890, 39350, 4402,
	-127, -1000, 15060, -73, -1000, 15060, -1000, 41208, -1000, -1000,
	428, 1745, -1000, 15060, 42771, 163, 9801, -1000, 42515, -50,
	-50, -1000, 2074, 1259, 1059, 896, 808, 2029, -1000, 20305,
	568, 1028, 40948, 44216, 41890, -1000, 15060, -1000, -1000, 1470,
	15060, -1000, 44216, 41890, 15760, 15760, 15760, 15760, 15760, 15760,
	15760, 15760, 15760, 15760, 15760, 15760, 15760, 15760, 15760, 15760,
	15760, 15760, 15760, 1269, 15760, 2028, 2028, 2028, -74, 15060,
	-1000, 1553, 1470, 15060, 15060, 41890, 161, 160, 159, -1000,
	15060, -132, 15060, 15060, 15060, -1000, -1000, -1000, 156, -1000,
	2027, -1000, -1000, -1000, -1000, 3085, -1000, 1430, -1000, -128,
	-1000, 1391, -1000, 1430, -1000, -1000, 1273, -1000, 287, 15060,
	19259, -1000, 420, -1000, -129, -1000, 26077, -1000, 419, -225,
	-1000, 475, -1000, 456, 285, 35551, 26077, -1000, -1000, -1000,
	660, 653, 1674, -1000, 1234, -1000, 589, -1000, 1012, 15060,
	16810, 284, 268, 983, -1000, 1669, 1160, 1668, 1160, -1000,
	-75, 943, -1000, 21003, 15060, -1000, 652, 21003, -1000, -1000,
	15060, -1000, 651, 21003, 559, 1469, 741, -1000, 753, -1000,
	1410, -1000, 24049, 267, 35551, 266, -1000, 262, -1000, -1000,
	-1000, 261, 35551, 1304, 453, 23377, -1000, 562, 873, -1000,
	43658, -1000, 873, 8401, 1832, -134, -1000, -1000, -1000, 567,
	19956, 19259, 9451, -135, -1000, -1000, -1000, -1000, 43658, -76,
	1818, 1818, -1000, 2025, -1000, 417, 155, -1000, 26749, -1000,
	-76, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35551, 6300,
	35551, 35551, 993, 40823, -1000, 1821, 6300, 2018, 281, 3382,
	357, 15060, 41890, 44081, -136, 15060, 15060, -1000, 153, 15060,
	416, 43658, -1000, -1000, -1000, 43658, 15060, 2072, 15060, 152,
	151, 147, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	144, -1000, -1000, 38239, 15060, 141, -1000, 137, 135, 43658,
	1553, 43658, -1000, -1000, 466, 466, 790, 790, 790, 790,
	2028, 1446, 565, 617, 2676, 2676, 2676, 450, 315, 315,
	2676, 2676, 2676, 1458, 1308, 260, 4344, 15060, 125, -1000,
	-1000, 43658, 43658, 120, -1000, -1000, -1000, -132, 490, 40563,
	40438, -1000, 116, 109, 1443, 1909, -1000, 19259, 1443, -1000,
	35551, 43658, -1000, -207, -1000, 2023, -1000, -1000, 1330, -1000,
	5595, 26077, 35551, -137, -1000, 35551, 35551, 35551, 1667, -1000,
	3462, -1000, 40178, -142, -1000, 279, 1873, 15060, -1000, -1000,
	259, 16810, 35551, -1000, 1340, 1345, 608, 35551, -1000, 35551,
	-1000, 35551, 35551, 35551, -1000, 258, 57, -143, 35551, -1000,
	-144, 35551, -1000, -1000, 23041, 703, -1000, 964, 1406, -1000,
	16810, 256, 35551, 24049, 1960, 16810, 1131, 1315, 453, 23377,
	-1000, 725, -1000, -1000, -78, -1000, 283, 38, 873, -1000,
	-84, -1000, 471, 1800, -1000, 1799, 415, -1000, -1000, -94,
	254, -1000, 468, 455, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1821, 15060, 15060, 44081, -145, -1000, 281, 281, -1000,
	40053, -1000, 43658, -1000, 42515, -1000, -1000, -1000, -1000, 949,
	-1000, 39793, -1000, -1000, -1000, -1000, 15760, 1451, 253, 41890,
	39668, -1000, -1000, 15060, -1000, -1000, -1000, -1000, 564, 15060,
	15060, 1391, 564, -150, 456, -1000, -1000, -1000, 2017, -1000,
	-152, -1000, -1000, -1000, -1000, 35551, -1000, 35551, -1000, 6300,
	35551, 1460, 1192, -1000, -1000, 1320, 250, 15760, 35551, -1000,
	1007, 16810, 1821, 57, 6300, 1821, 39408, 4810, -153, -158,
	1171, -1000, 1034, 15060, -1000, 41890, 1160, 1160, -1000, 649,
	644, 15060, 642, -1000, 637, -1000, -101, 21003, -1000, -1000,
	1906, 953, -160, 16810, -163, 108, 38, -166, 35551, -1000,
	453, 23377, -1000, 1747, 1755, 35551, 1826, -1000, -1000, 249,
	248, 247, -1000, 26413, 26413, 23041, 23041, -1000, 281, 281,
	-1000, -1000, 106, 1028, 1901, -1000, 4368, 15760, 41890, -171,
	-1000, 39283, -1000, 35551, 43658, -132, -1000, -1000, 26077, 316,
	-1000, -1000, 1297, -1000, -1000, 35551, 1220, -1000, -1000, 15060,
	4344, 242, 1410, 240, -1000, -1000, -1000, -1000, -1000, -1000,
	1873, -48, -1000, 915, -1000, -1000, 43658, 1866, -1000, -1000,
	35551, 35551, -50, 239, 238, -1000, 1083, 35551, 1007, -174,
	-1000, 1410, -1000, 1007, 237, 23377, -1000, 1304, 724, -176,
	35551, -1000, -1000, 6648, 23041, 23041, -1000, -179, -1000, -1000,
	-1000, 882, 15060, 4368, -185, -1000, -1000, -125, -1000, 1947,
	-1000, -1000, -1000, -1000, 1666, 39023, 1282, 35551, -1000, 35551,
	1821, 105, 35551, 593, 6300, -1000, -1000, 104, 15060, 15060,
	236, 230, 229, 1410, 1007, -1000, 1410, 16810, -1000, 1315,
	801, -1000, 567, -1000, -186, -187, -1000, 102, 15410, 15410,
	-132, -1000, 35551, 228, 1653, -1000, 1062, 1030, 97, -192,
	-1000, -1000, 220, -1000, 15060, -1000, 2072, -193, -194, 35551,
	35551, 35551, -1000, 1410, -1000, -195, -1000, 19956, -1000, 559,
	559, -1000, -1000, -1000, 16460, 1118, 850, 41753, -1000, -1000,
	-1000, 35551, -1000, 1119, 1115, 858, -1000, -1000, -1000, -1000,
	-1000, 1282, 43658, -1000, -1000, -200, -201, -213, -1000, 1007,
	-181, -1000, -1000, 1997, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1786, -1000, 601, 1235, 1235, 1062, 216, 211, 1087,
	1410, -1000, 14710, -1000, 1984, -1000, -1000, 1299, -1000, -1000,
	941, 939, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	96, 6300, 90, 6300, -1000, 584, -1000, 582, 210, 1298,
	-64, -1000, 716, 244, -169, -1000, 210, -1000, -1000, 941,
	-65, -1000, 939, -172, -1000, -1000, 939, -1000,
}
var sqlPgo = [...]int{

	0, 2436, 2435, 1568, 1856, 2434, 2432, 2431, 2430, 2429,
	2428, 2427, 2422, 2418, 2415, 2412, 2411, 2406, 2403, 2400,
	2399, 2395, 2393, 2391, 1844, 2389, 1804, 2384, 2380, 2379,
	2378, 2377, 2374, 1798, 2371, 2365, 2362, 2360, 2359, 2358,
	2355, 1795, 2352, 1788, 2350, 2349, 2348, 2340, 2337, 1784,
	2333, 89, 114, 1766, 2331, 2328, 1764, 1757, 1752, 2325,
	1742, 2322, 2321, 1736, 1708, 2320, 63, 2317, 2310, 2309,
	1701, 1695, 2305, 2303, 2302, 147, 2301, 1665, 2300, 2299,
	2298, 2297, 2296, 2292, 2291, 2290, 2288, 2286, 2284, 2283,
	2282, 2279, 2275, 2274, 2273, 2270, 2268, 157, 2267, 2266,
	1628, 1580, 2263, 2262, 39, 28, 16, 59, 32, 142,
	2877, 134, 2260, 2258, 2256, 2254, 2249, 2247, 30, 100,
	99, 2246, 49, 2245, 2243, 46, 29, 26, 21, 2242,
	93, 2241, 2240, 1045, 34, 2239, 2237, 132, 2236, 261,
	23, 2334, 150, 148, 112, 118, 2233, 2231, 2228, 50,
	119, 5, 4, 2, 7, 1, 2227, 2225, 2223, 19,
	86, 79, 2222, 27, 18, 2220, 2219, 128, 2217, 61,
	96, 1516, 94, 120, 1910, 98, 2214, 60, 15, 67,
	2211, 2207, 152, 45, 2204, 3, 72, 135, 2203, 54,
	155, 126, 73, 127, 130, 2202, 2200, 2199, 105, 2198,
	117, 104, 2197, 2196, 69, 2194, 97, 138, 2193, 2191,
	2188, 90, 2187, 122, 2182, 2176, 153, 140, 111, 10,
	48, 62, 13, 1506, 1489, 133, 87, 57, 51, 2174,
	2212, 1237, 24, 52, 106, 84, 53, 108, 66, 95,
	139, 37, 2168, 2167, 131, 2166, 2165, 2161, 2159, 2156,
	107, 2152, 2150, 33, 2149, 78, 25, 101, 88, 38,
	55, 123, 113, 149, 102, 2140, 82, 124, 2135, 103,
	2134, 2130, 1797, 116, 2129, 2128, 2127, 1792, 1690, 1594,
	1120, 2126, 2125, 1340, 1097, 2123, 2122, 80, 2120, 115,
	109, 92, 146, 304, 58, 2119, 121, 36, 2117, 40,
	35, 0, 365, 230, 2116, 125, 68, 2115, 2114, 2113,
	2112, 31, 8, 14, 9, 12, 11, 83, 43, 2111,
	2110, 129, 75, 81, 2109, 151, 2108, 2107, 2106, 44,
	2105, 20, 2104, 22, 2103, 2102, 17, 6, 2101, 2099,
	145, 2098, 91, 2096, 1895, 2094, 143, 2093, 2092, 1703,
	2091, 41, 110,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 120, 120, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 117, 117, 122, 122, 122, 124, 124,
	121, 121, 116, 116, 24, 24, 64, 64, 107, 57,
	57, 57, 299, 299, 300, 300, 103, 103, 104, 104,
	104, 104, 105, 105, 106, 106, 106, 32, 32, 32,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 41, 41, 42, 42, 42, 42,
	42, 42, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 48, 48, 48, 46, 46, 46, 45,
	45, 45, 44, 44, 44, 47, 47, 47, 173, 173,
	172, 172, 176, 176, 49, 49, 49, 49, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 52, 52, 52, 52, 52, 52,
	52, 268, 268, 267, 50, 50, 242, 242, 53, 53,
	199, 199, 54, 54, 54, 54, 54, 55, 55, 65,
	65, 340, 340, 340, 344, 344, 345, 345, 346, 346,
	346, 346, 346, 346, 346, 342, 342, 60, 60, 60,
	60, 61, 61, 61, 62, 62, 102, 102, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 29, 30, 71,
	71, 71, 73, 70, 70, 70, 72, 72, 72, 72,
	74, 74, 75, 75, 75, 75, 75, 76, 76, 293,
	291, 291, 292, 292, 147, 147, 147, 147, 147, 148,
	148, 148, 298, 298, 298, 298, 298, 298, 297, 297,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 89, 89, 89,
	97, 97, 97, 97, 97, 97, 97, 78, 78, 83,
	83, 83, 83, 83, 79, 79, 84, 84, 85, 85,
	86, 86, 86, 86, 86, 86, 80, 80, 80, 80,
	88, 88, 88, 88, 87, 87, 93, 93, 93, 93,
	93, 93, 90, 90, 90, 90, 91, 91, 91, 94,
	94, 94, 94, 81, 81, 82, 82, 95, 95, 96,
	96, 96, 96, 96, 92, 92, 92, 341, 341, 343,
	343, 58, 58, 36, 36, 37, 37, 149, 149, 150,
	150, 221, 221, 221, 221, 151, 151, 123, 123, 123,
	152, 152, 153, 153, 154, 154, 154, 156, 156, 155,
	155, 155, 220, 309, 309, 310, 310, 310, 310, 310,
	310, 311, 311, 311, 311, 311, 311, 311, 307, 307,
	308, 305, 305, 306, 306, 306, 306, 347, 347, 219,
	219, 159, 159, 314, 314, 314, 314, 312, 312, 312,
	312, 312, 315, 313, 316, 316, 316, 316, 316, 254,
	254, 254, 38, 38, 99, 99, 39, 39, 129, 129,
	40, 40, 35, 35, 35, 203, 203, 163, 163, 259,
	259, 259, 140, 140, 118, 118, 118, 17, 13, 13,
	13, 13, 13, 13, 23, 23, 21, 21, 204, 204,
	205, 205, 59, 59, 63, 63, 68, 68, 98, 98,
	98, 98, 98, 98, 25, 25, 25, 25, 31, 31,
	31, 31, 67, 67, 349, 349, 136, 136, 136, 136,
	137, 137, 216, 216, 217, 217, 350, 350, 218, 218,
	218, 131, 130, 132, 132, 34, 34, 34, 125, 125,
	126, 126, 127, 127, 128, 128, 351, 351, 56, 56,
	56, 101, 101, 143, 143, 213, 213, 213, 215, 215,
	214, 214, 214, 189, 189, 189, 100, 100, 168, 168,
	178, 178, 179, 179, 265, 180, 180, 66, 66, 110,
	110, 108, 108, 108, 108, 108, 108, 109, 109, 109,
	111, 111, 111, 111, 111, 111, 111, 114, 114, 114,
	115, 115, 115, 113, 113, 322, 322, 322, 325, 325,
	321, 323, 323, 324, 324, 348, 348, 190, 190, 190,
	158, 157, 157, 161, 161, 160, 162, 162, 258, 258,
	258, 187, 187, 187, 187, 208, 208, 206, 206, 207,
	207, 209, 209, 210, 210, 210, 211, 211, 212, 212,
	186, 186, 238, 238, 112, 112, 112, 167, 167, 167,
	169, 169, 228, 228, 228, 229, 229, 227, 227, 227,
	227, 260, 260, 260, 260, 260, 260, 260, 260, 338,
	338, 338, 339, 339, 257, 257, 261, 261, 261, 261,
	261, 261, 255, 255, 255, 255, 256, 256, 266, 266,
	193, 193, 193, 193, 191, 191, 192, 192, 262, 262,
	262, 262, 188, 188, 263, 263, 263, 222, 222, 269,
	269, 269, 287, 287, 166, 166, 166, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 271, 271, 271, 271,
	273, 273, 273, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 286, 286, 286, 286, 286, 274, 274, 281, 281,
	282, 282, 283, 284, 275, 275, 276, 276, 277, 278,
	285, 285, 285, 285, 289, 289, 279, 279, 279, 279,
	279, 280, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 201, 201, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	232, 232, 232, 232, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 317, 317, 317, 317, 317,
	317, 317, 317, 319, 319, 320, 320, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 326, 326, 327,
	327, 329, 329, 330, 330, 331, 332, 332, 332, 333,
	334, 334, 328, 328, 335, 335, 335, 336, 336, 337,
	337, 337, 337, 337, 244, 244, 245, 246, 252, 252,
	252, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 138, 138, 138,
	138, 138, 175, 175, 174, 174, 241, 241, 239, 239,
	243, 243, 194, 194, 288, 288, 288, 288, 288, 288,
	288, 195, 195, 195, 202, 196, 196, 197, 197, 197,
	197, 197, 235, 236, 198, 198, 198, 237, 237, 247,
	251, 251, 250, 249, 249, 248, 248, 225, 225, 226,
	226, 224, 223, 183, 183, 182, 182, 181, 181, 352,
	352, 253, 253, 184, 184, 185, 177, 177, 264, 264,
	264, 264, 170, 170, 145, 145, 171, 171, 141, 141,
	144, 144, 142, 142, 142, 142, 164, 164, 165, 165,
	139, 139, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 290, 290, 290, 240, 133, 133, 133,
	134, 134, 135, 135, 295, 295, 295, 296, 296, 296,
	296, 294, 294, 294, 294, 294, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 1,
	2, 1, 2, 2, 7, 3, 2, 2, 2, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 1, 3,
	1, 2, 2, 3, 2, 2, 5, 3, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 1, 3, 1, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 2, 6,
	2, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 1, 4, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 7,
	7, 7, 4, 5, 5, 5, 5, 2, 0, 2,
	0, 3, 2, 8, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	1, 0, 9, 9, 6, 7, 5, 1, 3, 8,
	9, 7, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 3, 6, 4, 2, 4, 3, 3, 0,
	6, 3, 11, 14, 4, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	8, 10, 8, 10, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 3, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 2, 3, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 3, 3, 1, 5, 5, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 2, 3, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 3,
	3, 1, 3, 3, 1, 3, 3, 1, 1, 3,
	3, 1, 1, 6, 6, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 5, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 379, -4, -24, -26, -29, -32,
	-33, -54, -41, -42, -43, -53, -49, -55, -56, -57,
	-58, -50, -64, -63, -65, -68, -66, -59, -60, -69,
	-77, -98, -99, -100, -101, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -34, -35, -36,
	-37, -38, 73, -39, -40, 94, -324, 98, -44, -45,
	-46, -48, -47, 102, 109, 112, 134, 145, 228, 234,
	255, 257, 259, 266, -108, -110, 253, -61, -62, -70,
	-71, -72, -73, -102, 279, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, -94, -95, -96, 282, -25, -31, -67, 321, -11,
	-12, -15, -14, -16, -13, -20, -22, -19, -21, -23,
	-17, -18, -10, 111, -322, -111, -109, 376, 254, 330,
	35, 291, 61, 105, 261, 346, 353, -114, -112, -113,
	-115, 271, 338, 301, 380, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 2, 301,
	341, 87, 153, 239, -340, 2, -171, 301, 87, -142,
	-133, 369, 4, -301, -303, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 67,
	64, 65, 66, 69, 71, 72, 75, 76, 77, 85,
	86, 88, 90, 94, 96, 98, 101, 102, 104, 109,
	111, 110, 112, 122, 123, 128, 130, 135, 141, 142,
	145, 146, 154, 157, 159, 152, 169, 170, 171, 173,
	174, 175, 178, 177, 182, 183, 186, 187, 190, 192,
	193, 194, 197, 195, 199, 200, 202, 201, 207, 209,
	210, 212, 215, 218, 221, 224, 225, 226, 227, 228,
	230, 232, 234, 236, 237, 238, 239, 240, 242, 243,
	245, 246, 247, 248, 249, 253, 251, 252, 254, 255,
	256, 257, 259, 261, 262, 264, 280, 281, 292, 266,
	267, 268, 269, 270, 275, 272, 273, 276, 277, 279,
	282, 284, 287, 290, 291, 293, 296, 297, 294, 289,
	300, 302, 303, 304, 305, 306, 307, 308, 309, 316,
	317, 321, 322, 323, 324, 327, 328, 329, 330, 332,
	335, 336, 337, 342, 347, 348, 349, 350, 351, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 51, 52,
	53, 56, 89, 91, 92, 108, 113, 114, 124, 125,
	126, 136, 138, 147, 148, 151, 158, 160, 161, 162,
	163, 164, 166, 180, 196, 206, 208, 219, 223, 231,
	233, 241, 263, 274, 285, 286, 295, 298, 311, 312,
	313, 318, 319, 334, 338, 339, 379, 379, 2, 170,
	238, -141, -133, 87, 379, 379, 379, 379, 301, 2,
	272, 331, 341, -203, 87, 326, 379, 379, -133, 234,
	22, 2, 96, 157, 329, 328, 22, 230, 273, 303,
	305, 2, 379, 379, 379, 379, 379, 2, 341, 301,
	153, 87, 331, -133, 2, -52, 2, 376, -51, -4,
	-33, -43, -53, -49, -24, -26, -41, -57, -56, -58,
	-60, -64, -63, -66, -70, -71, -77, -100, -101, 279,
	111, -344, 2, 22, -345, -346, 73, 102, 134, 271,
	157, 96, 328, 301, 2, 170, 2, -133, 2, -340,
	2, 170, 2, -344, 2, -133, 2, -137, 2, 266,
	-133, 379, 379, 379, 379, 379, 187, 55, 263, 276,
	-75, 317, -74, 311, -293, -76, 2, -172, 197, -133,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 2, -97, 276,
	34, 55, 22, 60, 88, 135, 153, 154, 174, 68,
	69, 237, 187, 171, 316, 175, 277, 302, 317, 73,
	332, 306, 110, 4, 87, 197, 278, 311, 379, 379,
	379, -348, 2, 301, 268, 282, -109, -111, -110, -160,
	-161, 325, 165, 107, 217, -108, -110, 2, -322, -97,
	276, 2, 55, 22, -291, 2, -253, 213, -230, 93,
	-232, 367, 368, 362, 203, 352, -244, -234, -247, 108,
	263, 376, -141, -233, 382, 9, -319, -110, 29, -245,
	-246, 49, -133, 7, 8, 5, 6, -139, -271, -240,
	-280, 320, 115, 205, -317, -318, 4, -301, -295, -272,
	-282, -276, -279, 166, 58, 79, 80, 83, 81, 84,
	278, 331, 50, 28, 113, 114, 223, 231, 298, 318,
	319, 147, 206, 148, 56, 136, 180, 101, 37, 39,
	41, 42, 51, 52, 89, 91, 92, 124, 125, 126,
	158, 160, 161, 162, 163, 164, 208, 241, 285, 295,
	312, 313, 339, -302, -283, -284, -277, -278, 74, 116,
	133, 156, 149, 168, 172, 181, 184, 198, 220, 222,
	260, 283, -285, -349, 2, 317, 317, 2, -349, 2,
	-349, 2, -136, 2, 317, 314, -325, 242, -321, -133,
	-325, 379, 379, 381, 379, -157, -158, 2, 22, 99,
	-185, 2, 376, -260, 2, 374, -262, -141, -110, -261,
	376, 214, -3, 2, -262, 147, -141, 2, -262, 147,
	-141, 2, -133, 2, -144, 147, -141, -294, 4, -301,
	-303, -302, -304, 58, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 49, 50, 54, 57, 59, 68,
	73, 78, 79, 81, 80, 82, 83, 84, 93, 95,
	97, 99, 100, 103, 105, 107, 115, 117, 129, 131,
	132, 134, 137, 139, 150, 153, 155, 165, 167, 176,
	179, 185, 188, 189, 203, 204, 205, 211, 213, 214,
	216, 217, 229, 235, 244, 258, 271, 278, 288, 299,
	301, 310, 314, 315, 320, 325, 326, 331, 333, 340,
	341, 343, 344, 345, 346, 314, 381, -171, -164, -133,
	-224, -223, 378, -230, 2, -230, 2, 132, 376, -182,
	-183, -223, -224, 2, -172, 147, -172, 147, -133, 2,
	-172, 2, 153, -133, 147, 2, -133, 22, 132, 2,
	167, 2, 167, 2, -263, 2, -262, -173, 147, 2,
	-172, -173, 147, 2, -145, 147, 2, -144, -133, 147,
	2, -164, 147, 2, -199, 376, -268, 2, -267, -296,
	4, -301, -303, -302, 338, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 276, 213, 381,
	-172, -230, -242, 376, 132, -230, 213, -133, 2, 280,
	2, 376, -75, 53, 317, -217, 2, -218, -130, -131,
	-132, 169, 236, 240, 351, 314, 357, 132, -291, -176,
	378, -97, 2, -299, 2, -297, 9, -296, 5, 280,
	2, 237, 277, 55, 132, 2, 2, -341, 2, 213,
	132, 2, 132, 2, 132, 2, 132, 2, 132, 2,
	2, 237, 277, 2, 129, 2, 316, 2, 2, 132,
	2, 169, 236, 292, 2, 301, 341, 2, 132, 132,
	351, 2, -188, -262, 301, 351, 22, -160, -161, -187,
	-206, -207, 185, 117, 211, -190, 22, 99, -190, -190,
	44, 377, 377, -97, 280, 2, 10, 11, 57, 33,
	367, 368, 369, 370, 127, 371, 372, 365, 366, 364,
	355, 356, 359, 360, 361, 70, 358, 357, 63, 191,
	265, 118, 119, 120, 121, 250, 13, 14, 15, 26,
	216, 184, 352, 149, 283, 362, 16, 17, 18, 168,
	36, 150, -138, -146, -230, -230, -230, -230, -230, 222,
	-181, -225, 374, -110, 376, 376, -110, -230, -174, 376,
	7, -110, -239, 374, -248, -230, -182, 376, 5, 376,
	5, -326, 347, 129, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 233, -289, 342, -289, -289, -273, 376,
	-273, -274, 376, -273, 348, 353, 376, -216, -217, -216,
	314, -137, 381, -325, -165, 376, -185, -177, -264, -230,
	369, -177, -184, -253, 74, -193, 172, 198, 133, 181,
	260, 156, 7, -52, -227, 382, 376, 369, -257, 353,
	-110, -261, 376, -260, -141, 376, -120, 251, -119, 21,
	23, 102, 336, 108, 289, 307, 111, 267, 251, 108,
	111, 251, 289, 307, 267, 251, 108, 382, 111, -299,
	-142, 381, -294, 369, 293, 377, -170, -141, -183, 376,
	-159, 203, 203, -129, -323, 346, -159, 376, -134, 147,
	2, -133, -323, 203, -263, -143, -141, -143, 279, -133,
	30, -122, 381, 48, 256, 108, -122, 108, -122, 381,
	108, -122, 108, 108, -174, -230, 377, 381, -340, -346,
	73, 376, 30, -241, -269, -270, -272, -281, -275, -279,
	-280, 40, 46, 45, 308, 196, 274, 286, 334, 151,
	38, 212, 159, 4, 158, 160, 161, 162, 163, 164,
	285, 37, 241, 125, 126, 124, 101, 92, 91, 208,
	42, 41, -283, -284, -277, -278, 89, 312, 313, 166,
	39, 52, 51, 339, 295, -300, -299, -340, -293, -174,
	30, -217, 2, -350, 381, 183, -148, 190, 202, 141,
	214, 349, -298, 5, 4, -240, -254, 93, 187, -280,
	8, 368, -290, 7, 367, -292, -291, -292, 77, 378,
	-294, -172, 22, 281, 2, -293, -343, 129, -340, -293,
	-293, -293, -293, -293, 276, -52, 129, -133, 183, -293,
	2, -293, 2, 301, 153, 301, -122, 381, -299, 64,
	65, 351, -187, -207, -206, -209, -230, 22, -212, 123,
	199, -230, -232, -109, -109, -109, -162, -258, -230, 235,
	153, -293, -287, -269, -286, 246, 247, 245, 249, 248,
	-269, -294, 311, -230, -230, -230, -230, -230, -230, -230,
	-230, -230, -230, -230, -230, -230, -230, -230, -230, -230,
	-230, -230, -230, -230, -230, -230, -230, -230, -230, -230,
	-230, -230, -230, -230, -230, 184, 149, 283, 36, 150,
	-230, 314, -230, -230, -230, -230, 195, 203, 205, 320,
	115, 327, 99, 209, -352, 299, 32, -237, -110, 376,
	-252, 27, 288, 22, -244, 263, 376, -225, -230, -226,
	-175, -174, 377, 381, -175, -243, -239, -251, -250, 343,
	377, -174, 340, 22, 99, 369, 2, 7, -200, 350,
	194, 90, 142, 193, -201, 270, -327, 122, 137, 376,
	377, 2, 377, 2, 377, 2, 377, 2, -230, -230,
	-194, 2, -288, -174, 4, 350, 194, 90, 142, 193,
	270, -194, 2, -195, 2, -230, -174, -196, -231, -232,
	367, 368, 362, 376, 263, -197, 2, -230, -175, -230,
	43, 179, 315, -198, -230, 132, -174, -230, -230, -230,
	-174, -174, 2, -174, 2, 376, 7, 7, 311, 311,
	7, -137, -321, 30, -164, -167, 381, 132, 30, 4,
	-167, 381, 377, 172, 172, -260, -193, 172, -191, 220,
	-191, -191, -338, 376, 375, -257, -294, 374, 383, -175,
	2, -256, -255, 30, -133, 218, 377, -141, 381, 314,
	-204, 68, 59, -220, 147, 59, -305, -133, 68, -306,
	54, 326, 235, 131, -204, 68, -204, 68, 68, -262,
	33, -66, 66, 132, 314, -262, 66, 314, 33, -66,
	132, 314, -144, -294, 66, -266, 354, -133, 132, 377,
	381, -149, -164, -150, -133, -221, -220, -307, -308, -305,
	153, 326, 116, 30, 108, 108, 227, 30, 213, 203,
	-125, 304, 108, -222, 344, -213, -66, 376, 93, 30,
	-213, -178, -179, -265, -180, -141, 376, -133, -172, -173,
	-173, -144, -145, -133, -164, 377, 381, -52, -267, 314,
	333, -150, -51, 377, 381, -166, 29, 374, -200, 376,
	-266, 381, 132, 357, 314, 377, 317, -218, -147, 240,
	287, 252, 275, 8, 7, 7, 381, -294, -342, -133,
	276, -52, -141, -144, -141, -262, 129, 65, -210, -290,
	376, 368, -211, 263, 264, 381, -118, 31, 97, 173,
	-141, 351, -230, -230, 314, -352, 299, -237, -230, 195,
	205, 320, 115, 327, 99, 209, 132, 376, -231, -231,
	-174, -234, 376, -174, 375, 385, 377, -230, 375, 375,
	381, -249, -250, 103, -230, -161, 381, -160, -230, -174,
	-174, 377, 377, 314, 314, 314, 314, 376, -332, 221,
	376, 376, -230, 30, 381, 377, 132, 377, 377, -202,
	229, 377, 10, 11, 367, 368, 369, 370, 127, 371,
	372, 365, 366, 364, 355, 356, 357, 63, 191, 265,
	13, 14, 15, 168, 150, -231, -231, -231, -174, 376,
	377, -235, -236, 132, 129, 30, -198, -198, -198, 377,
	132, -174, 381, 381, 381, 377, 377, 377, 7, 377,
	381, 377, 351, 351, 377, 376, 377, -222, -264, -169,
	2, -260, -294, -222, -253, -260, -260, -192, 333, 213,
	172, -260, -255, 377, -339, 7, -257, -256, 7, -229,
	-228, 130, 201, 377, -133, 376, -257, 377, -119, -141,
	-133, -133, 203, -220, 147, -124, 203, -269, -133, 376,
	376, 173, 173, -133, -133, 147, -133, 147, -133, -133,
	-120, 251, -66, 351, 376, -141, 251, 351, -133, -66,
	376, -133, 251, 351, -103, 146, 209, 293, 132, -141,
	377, 377, 381, -134, 153, -134, -66, -172, -172, 5,
	-66, -141, 108, -126, 104, -351, 357, -133, -208, -206,
	-230, -189, -215, 258, 213, -170, 338, -133, -189, -168,
	381, 132, 357, -170, -122, -122, -122, -122, -230, -342,
	-299, 377, -269, 374, 375, 7, 7, -106, 346, -299,
	-342, -291, -291, -130, 324, 62, 240, -291, 381, 239,
	87, 301, -211, -230, -258, -141, 382, -230, -230, -231,
	-231, 132, 376, -230, -241, 26, 26, 377, -175, 381,
	-226, -230, 377, -239, 105, -230, 310, 377, 340, -161,
	-161, -161, 5, 194, 142, 193, -201, 193, -201, -201,
	7, -333, -133, 376, 344, -160, 377, -287, -269, -230,
	-235, -230, -287, -269, -231, -231, -231, -231, -231, -231,
	-231, -231, -231, -231, -231, -231, -231, -231, -231, -231,
	-231, -231, -231, 99, 203, 209, -231, 381, -175, -236,
	-235, -230, -230, -269, 377, 377, 377, -174, -230, -230,
	-230, 377, 7, -51, -186, 137, -266, 381, -186, -192,
	376, -230, -260, 375, 377, 381, -256, 375, 381, 384,
	357, -257, 376, -164, -255, 314, 314, 108, 203, 335,
	-309, -306, -230, -163, -259, -133, -320, 376, -317, -318,
	-139, 376, 376, -117, 102, 279, -205, 108, -122, 108,
	-122, 314, -204, 68, -233, -139, -133, -174, 314, -233,
	-174, 314, -233, -106, 132, 300, 293, -151, 152, -221,
	376, -134, 376, 376, -159, 376, -133, -127, 178, -351,
	-297, -323, -189, -189, -177, 204, 67, 377, -222, -179,
	-169, -253, 377, -107, 75, -107, 7, 375, 377, -105,
	215, -104, -133, 5, -133, -294, -133, -141, 214, 377,
	-118, -294, 26, 26, -230, -241, 377, -230, -230, 377,
	-230, 375, -230, 5, -230, 377, 377, 377, 377, -334,
	-133, -230, 377, 377, 377, -236, 132, 99, 209, 376,
	-230, 377, 377, 381, 377, 377, 377, 377, -238, 139,
	44, -260, -238, -164, -227, 7, -228, -294, 374, -256,
	-164, 377, -133, -133, -220, 108, -310, 68, -311, 57,
	116, 73, 203, 205, 326, 235, 54, 93, 244, 377,
	377, 381, -140, -182, 57, -140, -230, 376, -163, -164,
	203, 93, 203, 93, 86, 322, -133, -133, -141, -133,
	-133, 376, 377, -141, 377, -133, -300, 311, -152, -153,
	226, 150, -163, 376, -164, -149, 30, -163, 213, -128,
	177, -351, -297, -125, -214, 376, 213, -66, -189, 357,
	86, 86, 375, 381, 376, 357, 357, -118, -230, -230,
	377, 377, -161, -328, 226, 377, -231, 132, 376, -241,
	377, -230, -329, 345, -230, -174, -329, 377, -257, 7,
	377, -220, -133, -294, -133, 116, 147, 205, 173, 376,
	-231, -141, -219, -347, 72, 297, -259, -118, -294, -118,
	377, -174, 377, 377, 205, 205, -230, -269, -122, -122,
	314, 314, -174, 314, 314, -233, 44, 224, 377, -163,
	377, 377, -66, 377, -141, -351, -297, -126, 100, -164,
	68, -185, -110, 376, 376, 376, -104, -105, -299, -299,
	377, -161, 44, -231, -241, 377, 377, -330, -331, -133,
	-256, 375, -311, -134, 203, -230, -135, 376, -151, 376,
	-140, -161, 244, -121, 57, -133, -133, -161, 376, 376,
	186, 239, -141, -219, 377, -151, -219, 376, -297, -127,
	328, 204, 377, -133, -300, -300, 377, -335, 239, 264,
	-174, 377, 381, 30, 108, 377, -314, 192, -133, -164,
	-118, 377, -141, -116, 333, -294, 377, -174, -174, 376,
	376, 376, -151, -219, -151, -163, -128, 279, -222, 377,
	377, 377, -336, -337, 36, 323, 77, -230, -336, -331,
	-333, 116, -312, -315, -313, 213, 133, 225, 284, 377,
	377, -159, -230, 377, 377, -164, -164, -164, -151, 377,
	-178, -106, -106, -337, 232, 128, 263, 232, 128, -133,
	-313, 213, -315, 213, 328, 96, -314, 377, 377, 377,
	-219, -222, 26, -316, 200, 256, 48, 279, -316, -312,
	376, 376, -123, 48, 256, -151, -337, 20, 205, 93,
	-154, 226, -155, 226, 377, -294, 377, -294, 338, 338,
	-156, -185, 182, 381, -153, -152, 309, -154, -185, 381,
	-185, -154, 381, -153, -152, -155, 381, -155,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 307, 0, 159, 161, 163,
	165, 167, -2, 169, 171, 0, 0, 0, 182, 184,
	186, 188, 190, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 667, -2, 0, 287, 289, 298,
	300, 302, 304, 305, 0, 350, 352, 354, 356, 358,
	360, 362, 364, 366, 368, 370, 372, 374, 376, 378,
	379, 381, 383, 385, 0, 588, 590, 592, -2, 65,
	66, 67, 68, 69, 70, 78, 79, 80, 81, 72,
	74, 75, 77, 0, 703, -2, 714, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 680, 682, 684,
	686, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	43, 49, 51, 53, 56, 58, 60, 62, 64, 0,
	0, 0, 0, 0, 0, 125, 271, 0, 1282, 1206,
	1212, 1213, 1237, 1238, 1239, 1256, 1257, 1258, 1259, 1260,
	1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
	1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
	1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
	1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
	1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 151, 153, 154, 0,
	0, 0, 1208, 1282, 160, 162, 164, 166, 0, 173,
	0, 0, 0, 0, 0, 555, 170, 172, 262, 1344,
	264, 266, 0, 0, 0, 0, 176, 177, 178, 179,
	180, 181, 183, 185, 187, 189, 191, 192, 0, 0,
	0, 0, 0, 261, 259, 214, 215, 0, 244, 245,
	246, 247, 248, 250, 218, 220, 221, 223, 225, 227,
	229, 230, 232, 234, 235, 237, 239, 240, 242, 0,
	0, 0, 268, 274, 275, 276, 278, 279, 280, 281,
	282, 283, 284, 0, 131, 0, 462, 257, 255, 0,
	127, 0, 585, 0, 270, 586, 587, 582, 583, 1371,
	611, 288, 290, 299, 301, 303, -2, -2, 1464, -2,
	314, -2, 322, 1470, 0, 325, 326, 329, -2, 210,
	351, 353, 355, 357, 359, 361, 363, 365, 367, 369,
	371, 373, 375, 377, 380, 382, 384, 386, 387, 0,
	0, 0, 391, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 390, 392, 393, 394, 0, 589, 591,
	593, 0, 545, 705, 0, 0, -2, 678, 679, -2,
	0, 709, 709, 709, 0, 0, 679, 677, 0, 291,
	0, 293, 0, 391, 296, 297, 330, 331, 1191, 1192,
	908, 0, 0, 0, 0, 0, 0, 1010, 1012, 1437,
	1464, 0, 1014, 1015, 0, 1017, 1019, 1020, 0, 1023,
	1024, 1176, 1208, 1222, 1223, 1224, 1225, 0, 0, 1228,
	0, 1230, 1231, 1232, 1078, 1034, -2, -2, 1220, 836,
	837, 838, 839, -2, 1478, 1038, 1041, 1044, 1047, 1048,
	1051, 1052, 0, 1421, 1438, 1439, 1460, 1461, 1469, 1473,
	1474, 1445, 1457, 1446, 1433, 1443, 1455, 1288, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1246, 870, 871, 876, 877, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 879, 613, 595, 604, 613, 597, 598, 599,
	600, 601, 602, 603, 606, 0, 695, 1350, 698, 1219,
	696, 681, 683, 0, 685, 0, 0, 689, 711, 710,
	744, 745, 0, 693, 694, 704, 760, 798, 775, 766,
	0, 0, 2, 71, 0, 1445, 798, 73, 0, 1445,
	798, 76, 0, 82, 0, 1445, 1211, 0, 1251, 1252,
	1253, 1254, 1255, 1478, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1573, 0, 0, 272, 273, 1216,
	1214, 1215, 0, 155, 156, 157, 158, 0, 0, 1209,
	1185, 1183, 1184, 168, 522, 1445, 542, 1445, -2, 547,
	522, 551, -2, 702, 1445, 627, 263, 265, 0, 175,
	0, 640, 0, 642, 0, 657, 804, 117, 1445, 195,
	208, 117, 1445, 198, 117, 1445, 201, 1204, 117, 1445,
	204, 205, 1445, 207, 258, 0, 0, -2, 251, 253,
	1247, 1248, 1249, 1250, -2, 249, 219, 222, 224, 226,
	228, 231, 233, 236, 238, 241, 243, -2, 0, 0,
	0, 461, 0, 0, 0, 584, 0, 610, 306, 0,
	311, 0, 313, 1432, -2, -2, 317, 614, 618, 619,
	620, 0, 0, 0, 0, 0, 0, 0, 327, 211,
	0, 388, 389, 397, 398, 132, 133, 348, 349, 0,
	401, 422, 434, 0, 0, 405, 407, 460, 409, 0,
	0, 411, 0, 413, 0, 415, 0, 417, 0, 419,
	421, 423, 435, 425, 704, 427, 0, 429, 433, 0,
	438, 0, 440, 441, 442, 0, 0, 448, 0, 0,
	395, 396, 117, 802, 0, 0, 0, -2, 0, 673,
	723, 724, 0, 0, 0, 0, 707, 708, 0, 0,
	0, 669, 670, 292, 0, 295, 0, 0, 0, 0,
	1111, 1112, 1113, 1114, 1115, 1116, 1119, 1120, 1117, 1118,
	1121, 1122, 0, 0, 0, 0, 0, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 1124, 1125, 1126, 0,
	0, 1128, 0, 1130, 0, 0, 0, 0, 0, 0,
	1190, 0, 0, 1127, 913, 914, 915, 947, 948, 0,
	1011, 1187, 1180, 1013, 0, 1133, -2, 1134, 0, 0,
	1016, 1021, 1022, 1133, 0, 1175, -2, 0, 1227, 0,
	905, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1156, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 855, 873, 884, 881, 880, 857, 0,
	856, 854, 0, 858, 0, 0, 0, 594, -2, 596,
	0, 608, 0, 697, 0, 0, 746, 749, 1196, 1200,
	1201, 749, 0, 1193, 0, 0, 0, 0, 795, 795,
	795, 793, 769, 0, 775, 0, -2, 799, 787, 0,
	-2, 766, 0, 0, 800, 0, 83, 579, 96, 0,
	579, 579, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 789,
	1207, 0, 1181, 1182, 147, 0, 0, 1202, 1186, 468,
	0, 0, 0, 546, 0, 701, 0, 0, 0, 1445,
	554, 1240, 629, 0, 808, 0, 643, 0, 0, 805,
	0, 193, 0, 115, 116, 0, 196, 0, 199, 0,
	0, 202, 0, 0, 0, 1134, 704, 0, 0, 277,
	0, 0, 704, 0, 1136, 816, 817, 818, 819, 820,
	905, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 867, 0, 842, 842, 842,
	859, 860, 868, 869, 874, 875, 886, 887, 889, 891,
	885, 885, 885, 882, 883, 789, 134, 0, 0, 0,
	0, -2, 319, 0, 616, 0, 621, 339, 340, 341,
	623, 624, 323, 342, 343, 344, 345, 346, 347, 0,
	539, 0, 541, 1233, 0, 320, 332, 321, 324, 0,
	212, 399, 400, 402, 403, 404, 408, 0, 457, 410,
	412, 414, 416, 418, 426, 430, 704, 436, 439, 443,
	444, 445, 446, 0, 0, 0, 544, 0, 308, 0,
	452, 0, 676, 721, 722, 727, 731, 732, 735, 738,
	739, 729, 908, 690, 691, 692, 715, 716, 566, 0,
	0, 294, 909, 812, 813, 861, 862, 863, 864, 865,
	910, 911, 0, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, -2, -2, -2, -2, -2, -2, -2,
	-2, 934, 935, 936, 937, 938, 939, 940, 941, -2,
	-2, -2, 945, 946, -2, 1129, 1131, 0, 1190, 0,
	-2, 0, -2, -2, -2, -2, 959, 0, 961, 964,
	966, 968, 0, 0, 0, 0, 1189, 978, 1167, 0,
	0, 1108, 1109, 1110, 963, 0, 0, 1188, 1179, 0,
	0, 1132, 1018, 0, 0, 0, 1140, 1174, 1170, 0,
	1025, 714, 0, 0, 0, 0, 1032, 0, 1236, 892,
	893, 894, 895, 896, 897, 906, 1088, 0, 0, 0,
	1039, 1040, 1042, 1043, 1045, 1046, 1049, 1050, 0, 0,
	0, 1056, 0, 1143, -2, -2, -2, -2, -2, -2,
	-2, 0, 1058, 0, 1060, 1134, 1153, 0, 0, 981,
	0, 0, 0, 0, 1464, 0, 1063, 1134, 1161, 0,
	0, 0, 0, 0, 1134, 0, 1166, 0, 0, 0,
	0, 0, 1074, 0, 1076, 0, 0, 0, 0, 0,
	0, 607, 699, 0, 0, 808, 0, 0, 0, 1199,
	808, 0, 1195, 0, 0, 0, 0, 0, 790, 794,
	791, 792, 0, 0, 775, 787, 757, 0, 0, 0,
	764, 765, 786, 0, 785, 774, -2, 0, 0, 0,
	0, 0, 578, 98, 1445, 0, 119, 0, 0, 512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 1210, 0, 137, 0, 1217, 0, 0,
	0, 0, 0, 467, 1216, 469, 471, 472, 473, 474,
	1241, 0, 1241, 0, 0, 0, 0, 0, 0, 0,
	631, 637, 0, 726, 0, 655, 645, 0, 0, 0,
	655, 659, 660, 662, 663, 0, 0, 806, 209, 117,
	117, 1205, 117, 117, 206, 260, 0, 216, 252, 0,
	0, 0, 254, 256, 0, 809, 811, 0, 821, 0,
	146, 0, 0, 0, 0, 312, 0, 615, 622, 0,
	336, 0, 338, 540, 1235, 1234, 0, 213, 459, 285,
	428, 431, 454, 455, 456, 803, 0, 453, 0, 733,
	0, 0, 730, 736, 737, 0, 718, 564, 565, 0,
	0, 0, -2, -2, 0, 0, 0, 979, -2, 960,
	962, 965, 967, 969, 0, 0, 0, 0, 0, 0,
	0, 980, 1133, 0, 1177, 1180, -2, 1135, 1138, 1139,
	0, 0, 1171, 0, 0, 0, 0, 713, 714, 714,
	714, 1031, 0, 0, 0, 0, 0, 0, 1033, 0,
	0, 0, 0, 0, 0, 1055, 0, 1057, 1059, 0,
	0, 1061, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 984, 985, 986, 0, 1133,
	1062, 1159, 1160, 0, 0, 0, 0, 0, 0, 1068,
	0, 1165, 0, 0, 0, 1072, 1073, 1075, 0, 840,
	0, 866, 888, 890, 878, 704, 1218, 741, 1197, 789,
	748, 750, 1198, 741, 1194, 777, 0, 779, 0, 0,
	0, 781, 0, 770, 0, 772, 787, 762, 0, 0,
	755, 0, 754, 775, 783, 0, 0, 801, 97, 568,
	0, 0, 0, 100, 1445, 108, 0, 494, 0, 0,
	0, 0, 0, 581, 109, 1445, 117, 1445, 117, 110,
	84, 579, 85, 0, 0, 574, 0, 0, 567, 86,
	0, 576, 0, 0, 146, 0, 0, 148, 0, 1203,
	476, 521, 0, 0, 1241, 0, 465, 522, 543, 548,
	550, 0, 0, 633, 637, 0, 636, 702, 655, 725,
	807, 638, 655, 0, 0, 0, 647, 644, 641, 808,
	0, 0, 0, 0, 194, 197, 200, 203, 1135, 267,
	0, 0, 1137, 0, 814, 0, 0, 126, 0, 135,
	269, 309, 310, 315, 334, 335, 337, 333, 0, 0,
	0, 0, 0, 0, 717, 566, 0, 912, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1168, 0, 0,
	0, 1179, -2, 1141, 1169, 1173, 0, 1026, 0, 0,
	0, 0, 1229, 898, 899, 900, 901, 902, 903, 904,
	0, 1086, 1087, 1091, 0, 0, 1037, 0, 0, 1142,
	1152, 1154, 982, 983, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, -2, -2, -2, 1000, 1001, 1002,
	-2, -2, -2, 0, 0, 0, 1155, 0, 0, 1157,
	1158, 1162, 1163, 0, 1065, 1066, 1067, 1164, 0, 0,
	0, 872, 0, 0, 743, 0, 747, 0, 743, 778,
	0, 797, 780, 760, 771, 0, 768, 758, 0, 759,
	0, 787, 0, 0, 767, 0, 0, 0, 0, 118,
	492, 511, 0, 0, 557, 563, 563, 0, 1035, 1036,
	0, 0, 0, 102, 0, 0, 0, 0, 106, 0,
	112, 0, 0, 0, 91, 0, 0, 0, 0, 90,
	0, 0, 89, 124, 0, 0, 149, 481, 0, 470,
	0, 0, 0, 468, 0, 0, 0, 635, 637, 0,
	628, 629, 174, 639, 653, 654, 652, 0, 655, 661,
	658, 664, 0, 0, 128, 0, 0, 815, 822, 144,
	1334, 142, 139, 141, 286, 449, 450, 451, 728, 734,
	719, 566, 0, 0, -2, 0, 972, -2, -2, 1104,
	1135, 1178, 1172, 1226, 714, 1027, 1029, 1030, 907, 1093,
	1090, 0, 1077, 1053, 1054, 1151, 0, 0, 0, 0,
	1135, 1106, 1064, 0, 1070, 1071, 841, 700, 1082, 0,
	0, 751, 1082, 0, 775, 773, 756, 752, 0, 763,
	0, 784, 570, 572, 99, 0, 493, 0, 496, 0,
	0, 0, 0, 502, 503, 0, 0, 0, 0, 513,
	520, 0, 566, 1221, 0, 566, 0, 0, 0, 0,
	0, 114, 0, 0, 580, 0, 117, 117, 569, 0,
	0, 0, 0, 575, 0, 577, 136, 0, 463, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 625,
	637, 0, 630, 631, 0, 0, 0, 646, 656, 0,
	0, 0, 810, 0, 0, 0, 0, 720, -2, -2,
	973, 1105, 0, 714, 0, 1079, -2, 0, 0, 0,
	1107, 0, 687, 0, 742, 740, 688, 796, 787, 0,
	782, 101, 0, 497, 498, 1241, 0, 501, 504, 0,
	506, 1243, 476, 0, 517, 518, 558, 559, 562, 560,
	563, 714, 515, 0, 103, 104, 113, 121, 105, 111,
	0, 0, 714, 0, 0, 788, 0, 0, 520, 0,
	510, 476, 466, 520, 0, 0, 632, 633, 0, 0,
	0, 665, 666, 0, 0, 0, 143, 0, 138, 140,
	1028, 1096, 0, -2, 0, 1008, 1069, 1081, 1083, 0,
	761, 753, 495, 499, 0, 0, 526, 0, 514, 0,
	566, 0, 0, 123, 0, 571, 573, 0, 0, 0,
	0, 0, 0, 476, 520, 464, 476, 0, 634, 635,
	0, 649, 808, 651, 0, 0, 145, 0, 0, 0,
	1092, 1009, 0, 0, 0, 505, 531, 0, 0, 0,
	561, 1026, 522, 107, 0, 120, 0, 0, 0, 0,
	0, 0, 508, 476, 552, 0, 626, 0, 650, 146,
	146, 1089, 1094, 1097, -2, 1405, 1279, 0, 1095, 1084,
	1085, 0, 507, 527, 528, 0, 523, 524, 525, 1242,
	519, 526, 122, 93, 95, 0, 0, 0, 509, 520,
	808, 129, 130, 0, 1099, 1100, 1101, 1102, 1103, 500,
	529, 0, 530, 0, 0, 0, 531, 0, 0, 479,
	476, 648, 0, 532, 0, 535, 536, 0, 533, 516,
	0, 0, 475, 477, 478, 553, 1098, 534, 537, 538,
	0, 0, 0, 0, 482, 0, 483, 0, 0, 0,
	481, 487, 0, 0, 480, 486, 0, 484, 488, 0,
	481, 485, 0, 480, 491, 489, 0, 490,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 365, 3, 371, 366, 3,
	376, 377, 369, 367, 381, 368, 378, 370, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 385, 380,
	355, 357, 356, 359, 382, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 374, 3, 375, 372, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 383, 364, 384, 362,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 358, 57698, 360, 57699, 361,
	57700, 363, 57701, 373, 57702, 379, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:887
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:893
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:899
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:919
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:992
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1064
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1070
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1076
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1085
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1094
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1163
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1186
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1196
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1259
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1263
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1290
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1316
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1423
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1481
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1482
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			return helpWith(sqllex, "CREATE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "DELETE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1513
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1514
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1515
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1516
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			return helpWith(sqllex, "DROP")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1557
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1580
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "DELETE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			return helpWith(sqllex, "INSERT")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1706
		{ /* SKIP DOC */
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			return helpWith(sqllex, "GRANT")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			return helpWith(sqllex, "RESET")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1912
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			return helpWith(sqllex, "RESET")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1951
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1952
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1953
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			return unimplemented(sqllex, "set local")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1981
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2031
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2036
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2056
		{
			return unimplemented(sqllex, "set from current")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2058
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2064
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = Low
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = Normal
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = High
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2167
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2168
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2169
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2170
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2172
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2173
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2174
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return helpWith(sqllex, "SHOW")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2195
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.str = "client_encoding"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2243
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2254
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2313
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2361
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2410
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2421
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2432
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2443
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2454
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2458
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2462
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2466
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2470
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2474
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2480
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2484
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2488
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2494
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2522
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2629
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2633
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = DropDefault
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[1].union.exprs()}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[3].union.exprs()})
		}
	case 489:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[6].union.exprs()},
			}}, sqlDollar[8].union.rangePartitions()...)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[7].union.partitionBy(),
			}}, sqlDollar[9].union.rangePartitions()...)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[7].union.partitionBy(),
			}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2931
		{
			return unimplemented(sqllex, "match full")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2932
		{
			return unimplemented(sqllex, "match partial")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2933
		{
			return unimplemented(sqllex, "match simple")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2934
		{
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2942
		{
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2943
		{
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2944
		{
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2947
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2953
		{
			return unimplemented(sqllex, "no action")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2957
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2958
		{
			return unimplemented(sqllex, "action set null")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2959
		{
			return unimplemented(sqllex, "action set default")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = &CreateSequence{Name: sqlDollar[3].union.normalizableTableName(), IfNotExists: false}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &CreateSequence{Name: sqlDollar[6].union.normalizableTableName(), IfNotExists: true}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2994
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3005
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3009
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3030
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3070
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = true
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = false
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3100
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3101
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3104
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3105
		{
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = Ascending
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = Descending
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3145
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3147
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = true
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = false
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3180
		{
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3181
		{
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3192
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3203
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3214
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3218
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3220
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3243
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3256
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3261
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3269
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3279
		{
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3280
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.str = ""
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.str = ""
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3326
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3339
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3341
		{
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = ReadOnly
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = ReadWrite
		}
	case 625:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.str = ""
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.str = ""
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.str = ""
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.str = ""
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3448
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3449
		{
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			return helpWith(sqllex, "INSERT")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3532
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3536
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3544
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3567
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3571
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3572
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3701
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3736
		{
			return helpWith(sqllex, "SELECT")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3737
		{
			return helpWith(sqllex, "VALUES")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3738
		{
			return helpWith(sqllex, "TABLE")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3784
		{
			return helpWith(sqllex, "SELECT")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			return helpWith(sqllex, "TABLE")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3839
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3840
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3844
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3845
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3848
		{
			return unimplemented(sqllex, "cte")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3852
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3856
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3859
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3860
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = true
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = false
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = false
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = true
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3883
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3884
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3931
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3955
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4007
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4008
		{
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4011
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4012
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4070
		{
			return helpWith(sqllex, "VALUES")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4087
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &From{}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4109
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4127
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4154
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4191
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = nil
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4257
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = true
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = false
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.str = astFullJoin
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.str = astLeftJoin
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.str = astRightJoin
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.str = astInnerJoin
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4374
		{
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4375
		{
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4461
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4475
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4483
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4507
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4518
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4599
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4608
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = nil
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4673
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4769
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 878:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4801
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4840
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4841
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 888:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 890:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = year
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = month
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = day
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = hour
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = minute
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = month
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = hour
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = minute
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = minute
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = nil
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = second
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4936
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4971
		{
			return unimplemented(sqllex, "at tz")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5245
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5418
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5471
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5472
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5485
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5496
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5512
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5513
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5517
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5526
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5535
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5537
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5541
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5544
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5545
		{
			return unimplemented(sqllex, "current role")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5554
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5575
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5580
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5585
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5594
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5595
		{
			return unimplemented(sqllex, "treat")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5597
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5617
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5632
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5637
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5641
		{
			return unimplemented(sqllex, "within group")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5642
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5646
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5677
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.str = ""
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5739
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5740
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5741
		{
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5744
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5745
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5751
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5752
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5753
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5754
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5755
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = Any
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = Some
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = All
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = Plus
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = Minus
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5803
		{
			sqlVAL.union.val = Mult
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = Div
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = Mod
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = Bitand
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = Bitor
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = Pow
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = Bitxor
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5811
		{
			sqlVAL.union.val = LT
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5812
		{
			sqlVAL.union.val = GT
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = EQ
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = LE
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = GE
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = NE
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = Like
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5821
		{
			sqlVAL.union.val = NotLike
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = ILike
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = NotILike
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5851
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5861
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5915
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6085
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6110
		{
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6111
		{
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6120
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6155
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6172
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6180
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6200
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6225
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6229
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6242
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6246
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6250
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6254
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6260
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6264
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6270
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6273
		{
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6283
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6287
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6294
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6298
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6309
		{
			return unimplemented(sqllex, "func const")
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6311
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6315
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6318
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6320
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6324
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6328
		{
			sqlVAL.union.val = DNull
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6345
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.str = ""
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6390
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
